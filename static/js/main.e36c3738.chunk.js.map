{"version":3,"sources":["utils.js","kcanvas.js","colors.js","Grid.js","data.js","canvas.js","App.js","index.js"],"names":["GridGenerator","SQRT_3","Math","sqrt","isOdd","d","nCols","nRows","cStart","cEnd","rStart","rEnd","idx","i","j","KGrid","this","kPoints","lines","qTree","d3","x","y","width","height","setup","F","H","G","HEX_W","N_HEX_COLS","ceil","N_HEX_ROWS","genGrid","kPoint","Array","isArray","length","zipObject","find","x0","ant","bat","cat","dog","y0","dx","dy","angle","PI","cos","sin","xD","yD","push","KPoint","angle1","angle2","dx1","dy1","dx2","dy2","addAll","pts","kgrid","rotate","rotationAngle","r","pow","newAngle","atan2","newX","newY","translate","dAnt","dBat","dCat","dDog","createKPoint","KPolygon","color","hull1","hull","hull2","triangle1","slice","map","triangle2","fromTriangles","translation","tMat","path","points","newPoints","applyToPoints","moveTo","forEach","lineTo","closePath","toString","KPolygonGroup","kPolygons","t","kPolygon","kP","copy","flatMap","polygonHull","console","log","pt","colors","GridLines","React","memo","line","key","x1","y1","x2","y2","stroke","GridPoints","activePoint","cx","cy","fill","startShapes","type","actions","Polygon","kPolygonGroup","drawHull","hullString","strokeDasharray","strokeWidth","strokeLinejoin","pathString","fillOpacity","Canvas","mouseOver","cRef","useRef","useState","canvasDims","setActivePoint","gridPoints","setGridPoints","gridLines","setGridLines","setPolygonGroups","t1Polygons","setT1Polygons","mouseMove","current","getBoundingClientRect","rX","rY","useEffect","clientWidth","clientHeight","intitialize","svgNode","polygons","kG1","pt1A","pt2A","lenA","pt1B","pt2B","lenB","pt1C","pt2C","getGrid","addEventListener","removeEventListener","ref","transform","App","activePt","setActivePt","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e36c3738.chunk.js","sourcesContent":["export const SQRT_3 = Math.sqrt(3);\n\nexport const isOdd = d => !!(d % 2);\n\nexport function* GridGenerator(nCols, nRows) {\n  let cStart, cEnd;\n  if (isOdd(nCols)) {\n    cStart = -(nCols - 1) / 2 - 1;\n    cEnd = (nCols - 1) / 2 + 1;\n  } else {\n    cStart = -nCols / 2 - 1;\n    cEnd = nCols / 2 + 1;\n  }\n\n  let rStart, rEnd;\n  if (isOdd(nRows)) {\n    rStart = -(nRows - 1) / 2;\n    rEnd = (nRows - 1) / 2 + 1;\n  } else {\n    rStart = -nRows / 2;\n    rEnd = nRows / 2 + 1;\n  }\n\n  let idx = 0;\n  for (let i = cStart; i < cEnd; i++) {\n    for (let j = rStart; j < rEnd; j++) {\n      yield [idx, i, j];\n      idx++;\n    }\n  }\n}\n","import { SQRT_3, GridGenerator, isOdd } from \"./utils\";\nimport { fromTriangles, applyToPoints } from \"transformation-matrix\";\nimport * as d3 from \"d3\";\nimport { find, zipObject } from \"lodash\";\nimport { polygonHull } from \"d3-polygon\";\n\n// Using https://github.com/chrvadala/transformation-matrix for transformations\nclass KGrid {\n  constructor() {\n    this.kPoints = [];\n    this.lines = [];\n\n    const qTree = d3\n      .quadtree()\n      .x(d => d.x)\n      .y(d => d.y);\n\n    this.qTree = qTree;\n  }\n\n  intitialize(width, height) {\n    this.width = width;\n    this.height = height;\n\n    this.setup();\n  }\n\n  setup() {\n    this.F = 20;\n    this.H = 2 * this.F;\n    this.G = SQRT_3 * this.F;\n\n    this.HEX_W = 2 * this.G;\n    this.N_HEX_COLS = Math.ceil(this.width / this.HEX_W);\n    this.N_HEX_ROWS = Math.ceil(this.height / (this.F + this.H));\n\n    this.genGrid();\n  }\n\n  // THIS DRAWS THE POLYGON THAT REPRESENT DOG COORDS\n  // const polygons = Object.entries(R.groupBy(d => `${d.i}.${d.j}`)(pts)).map(\n  //   ([k, v]) => {\n  //     var path = d3.path();\n  //     path.moveTo(v[0].x, v[0].y);\n  //     for (let i = 0; i < v.length; i++) {\n  //       path.lineTo(v[i].x, v[i].y);\n  //     }\n  //     path.closePath();\n\n  //     return path.toString();\n  //   }\n  // );\n\n  // var path = d3.path();\n  // if (shape.length) {\n  //   path.moveTo(shape[0][0], shape[0][1]);\n  //   for (let i = 0; i < shape.length; i++) {\n  //     path.lineTo(shape[i][0], shape[i][1]);\n  //   }\n  //   path.closePath();\n  // }\n\n  // const shapePath = path.toString();\n\n  createKPoint(kPoint) {\n    if (Array.isArray(kPoint) && kPoint.length === 4) {\n      kPoint = zipObject([\"ant\", \"bat\", \"cat\", \"dog\"], kPoint);\n    }\n    return find(this.kPoints, kPoint);\n  }\n\n  genGrid() {\n    const kPoints = [];\n    const lines = [];\n\n    for (const [idx, i, j] of GridGenerator(this.N_HEX_COLS, this.N_HEX_ROWS)) {\n      let x0, ant, bat;\n      if (isOdd(j)) {\n        x0 = i * this.HEX_W + this.HEX_W / 2;\n        ant = (j + 1) / 2 + i;\n        bat = (1 - j) / 2 + i;\n      } else {\n        x0 = i * this.HEX_W;\n        ant = j / 2 + i;\n        bat = i - j / 2;\n      }\n\n      for (let d = 0; d < 6; d++) {\n        const cat = j;\n        const dog = d;\n\n        const y0 = j * (this.F + this.H);\n\n        let dx, dy;\n        if (d === 0) {\n          dx = 0;\n          dy = 0;\n        } else {\n          const angle = ((-30 * d + 150) * Math.PI) / 180;\n          if (isOdd(d)) {\n            dx = this.G * Math.cos(angle);\n            dy = -this.G * Math.sin(angle);\n          } else {\n            dx = this.H * Math.cos(angle);\n            dy = -this.H * Math.sin(angle);\n          }\n        }\n\n        const xD = x0 + dx;\n        const yD = y0 + dy;\n\n        kPoints.push(\n          KPoint(\n            {\n              idx: `${idx}.${d}`,\n              i,\n              j,\n              x: xD,\n              y: yD,\n              ant,\n              bat,\n              cat,\n              dog\n            },\n            this\n          )\n        );\n\n        // Gen Spokes\n        for (let d = 0; d < 12; d++) {\n          const angle = (d * 2 * Math.PI) / 12;\n\n          let dx, dy;\n\n          if (d % 2) {\n            dx = this.H * Math.cos(angle);\n            dy = -this.H * Math.sin(angle);\n          } else {\n            dx = this.G * Math.cos(angle);\n            dy = -this.G * Math.sin(angle);\n          }\n\n          lines.push([\n            [x0, y0],\n            [x0 + dx, y0 + dy]\n          ]);\n        }\n\n        // Gen Edges\n        // See Page 60 of notes\n        for (let d = 0; d < 6; d++) {\n          const angle1 = ((-30 * d + 150) * Math.PI) / 180;\n          const angle2 = ((-30 * (d + 1) + 150) * Math.PI) / 180;\n\n          let dx1, dy1, dx2, dy2;\n\n          if (d % 2) {\n            dx1 = this.G * Math.cos(angle1);\n            dy1 = -this.G * Math.sin(angle1);\n            dx2 = this.H * Math.cos(angle2);\n            dy2 = -this.H * Math.sin(angle2);\n          } else {\n            dx1 = this.H * Math.cos(angle1);\n            dy1 = -this.H * Math.sin(angle1);\n            dx2 = this.G * Math.cos(angle2);\n            dy2 = -this.G * Math.sin(angle2);\n          }\n\n          lines.push([\n            [x0 + dx1, y0 + dy1],\n            [x0 + dx2, y0 + dy2]\n          ]);\n        }\n      }\n    }\n\n    this.qTree.addAll(kPoints);\n    this.kPoints = kPoints;\n    this.lines = lines;\n  }\n\n  getGrid() {\n    return {\n      pts: this.kPoints,\n      lines: this.lines\n    };\n  }\n}\n\nexport const KPoint = (kPoint, kgrid) => {\n  kPoint.rotate = rotationAngle => {\n    const { x, y } = kPoint;\n\n    const r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n    const angle = Math.atan2(y, x);\n    const newAngle = angle + rotationAngle;\n\n    const newX = r * Math.cos(newAngle);\n    const newY = r * Math.sin(newAngle);\n\n    return kgrid.qTree.find(newX, newY);\n  };\n\n  kPoint.translate = ({ dAnt = 0, dBat = 0, dCat = 0, dDog = 0 }) => {\n    return kgrid.createKPoint({\n      ant: kPoint.ant + dAnt,\n      bat: kPoint.bat + dBat,\n      cat: kPoint.cat + dCat,\n      dog: kPoint.dog + dDog\n    });\n  };\n\n  return kPoint;\n};\n\nexport class KPolygon {\n  constructor(kPoints, color) {\n    this.kPoints = kPoints;\n    this.color = color;\n  }\n\n  tMat() {\n    const hull1 = this.color.hull;\n    const hull2 = this.kPoints;\n\n    // get transMatrix from hull1 to hull2\n    const triangle1 = hull1.slice(0, 3).map(d => [d.x, d.y]);\n    const triangle2 = hull2.slice(0, 3).map(d => [d.x, d.y]);\n    return fromTriangles(triangle1, triangle2);\n  }\n\n  copy() {\n    return new KPolygon(this.kPoints, this.color);\n  }\n\n  rotate(rotationAngle) {\n    this.kPoints = this.kPoints.map(d => d.rotate(rotationAngle));\n    return this;\n  }\n\n  translate(translation) {\n    this.kPoints = this.kPoints.map(d => d.translate(translation));\n    return this;\n  }\n\n  pathString(tMat) {\n    var path = d3.path();\n\n    const points = this.kPoints.map(d => [d.x, d.y]);\n\n    const newPoints = tMat ? applyToPoints(tMat, points) : points;\n\n    if (newPoints.length) {\n      path.moveTo(newPoints[0][0], newPoints[0][1]);\n      newPoints.forEach(([x, y]) => path.lineTo(x, y));\n      path.closePath();\n    }\n\n    return path.toString();\n  }\n}\n\nexport class KPolygonGroup {\n  constructor(kPolygons = [], hull = [], hull2 = []) {\n    this.kPolygons = kPolygons;\n    this.hull = hull;\n    this.hull2 = hull2;\n\n    // get transMatrix from hull1 to hull2\n    const triangle1 = hull.slice(0, 3).map(d => [d.x, d.y]);\n    const triangle2 = hull2.slice(0, 3).map(d => [d.x, d.y]);\n    const t = fromTriangles(triangle1, triangle2);\n\n    this.tMat = t;\n  }\n\n  add(kPolygon) {\n    this.kPolygons.push(kPolygon);\n  }\n\n  copy() {\n    return new KPolygonGroup(this.kPolygons.map(kP => kP.copy()));\n  }\n\n  rotate(rotationAngle) {\n    this.kPolygons = this.kPolygons.map(kP => kP.rotate(rotationAngle));\n    return this;\n  }\n\n  hullString() {\n    const pts = this.kPolygons.flatMap(kPolygon =>\n      kPolygon.kPoints.map(kPoint => kPoint)\n    );\n\n    const hull = polygonHull(\n      pts.map(kPoint => [kPoint.x, kPoint.y, kPoint.idx])\n    );\n\n    console.log(\n      pts,\n      hull,\n      pts.find(pt => pt.idx === \"96.0\")\n    );\n\n    var path = d3.path();\n\n    if (this.hull.length) {\n      path.moveTo(this.hull[0].x, this.hull[0].y);\n      this.hull.forEach(kP => path.lineTo(kP.x, kP.y));\n      path.closePath();\n    }\n\n    return path.toString();\n  }\n\n  translate(translation) {\n    this.kPolygons = this.kPolygons.map(kP => kP.translate(translation));\n    return this;\n  }\n}\n\nexport default KGrid;\n","export const colors = {\n  base: \"#F2FBFD\",\n  dark: \"#002C3E\",\n  a1: \"#049DD9\",\n  a2: \"#04B2D9\",\n  highlight: \"#F20544\",\n  highlight_dull: \"#FB93AF\"\n};\n","import React from \"react\";\nimport { colors } from \"./colors\";\n\nexport const GridLines = React.memo(({ lines }) => (\n  <>\n    {lines.map((line, idx) => (\n      <line\n        key={idx}\n        x1={line[0][0]}\n        y1={line[0][1]}\n        x2={line[1][0]}\n        y2={line[1][1]}\n        stroke={\"#eee\"}\n      />\n    ))}\n  </>\n));\n\nexport const GridPoints = React.memo(({ points, activePoint }) => (\n  <>\n    {points.map((pt, idx) => (\n      <circle\n        key={idx}\n        cx={pt.x}\n        cy={pt.y}\n        // r={pt.idx === activeIdx ? 5 : 2}\n        r={3}\n        fill={pt === activePoint ? colors.highlight : \"#ddd\"}\n      />\n    ))}\n  </>\n));\n","export const startShapes = [\n  {\n    type: \"KPolygon\",\n    kPoints: [\n      [1, 0, 1, 0],\n      [0, -1, 1, 0],\n      [-1, -1, 0, 0],\n      [-1, 0, -1, 0],\n      [0, 1, -1, 0],\n      [1, 1, 0, 0]\n    ],\n    color: \"red\"\n  },\n  {\n    type: \"KPolygon\",\n    kPoints: [\n      [-2, 2, -4, 0],\n      [-2, 0, -2, 0],\n      [0, 2, -2, 0]\n    ],\n    color: \"green\",\n    actions: [[[\"duplicate\"], [\"rotate\", (60 * Math.PI) / 180]]]\n  },\n  {\n    type: \"KPolygon\",\n    kPoints: [\n      [-1, 1, -2, 0],\n      [-2, 0, -2, 0],\n      [-2, -1, -1, 0],\n      [-1, -1, 0, 3],\n      [-1, 0, -1, 0],\n      [-1, 0, -1, 5]\n    ],\n    color: \"orange\"\n  }\n];\n","import React, { useRef, useEffect, useState } from \"react\";\nimport KGrid, { KPolygon, KPolygonGroup } from \"./kcanvas\";\nimport { GridLines, GridPoints } from \"./Grid\";\nimport { startShapes } from \"./data\";\n// See Page 58 in Notes\n\nconst kgrid = new KGrid();\n\nconst Canvas = ({ mouseOver }) => {\n  const cRef = useRef(null);\n\n  const [canvasDims] = useState({ width: 800, height: 500 });\n  const [activePoint, setActivePoint] = useState(null);\n  const [gridPoints, setGridPoints] = useState([]);\n  const [gridLines, setGridLines] = useState([]);\n  const [polygonGroups, setPolygonGroups] = useState([]);\n  const [t1Polygons, setT1Polygons] = useState([]);\n\n  const mouseMove = ({ x, y }) => {\n    const { x: rX, y: rY } = cRef.current.getBoundingClientRect();\n    const pt = kgrid.qTree.find(\n      x - rX - canvasDims.width / 2,\n      y - rY - canvasDims.height / 2\n    );\n    if (pt && pt !== activePoint) {\n      setActivePoint(pt);\n      mouseOver(pt);\n    }\n  };\n\n  useEffect(() => {\n    const width = cRef.current.clientWidth;\n    const height = cRef.current.clientHeight;\n\n    kgrid.intitialize(width, height);\n\n    const svgNode = cRef.current;\n\n    const polygons = startShapes.map(\n      ({ kPoints, color }) =>\n        new KPolygon(\n          kPoints.map(kPoint => kgrid.createKPoint(kPoint)),\n          color\n        )\n    );\n\n    for (let i = 1; i < 6; i++) {\n      polygons.push(polygons[2].copy().rotate((i * 60 * Math.PI) / 180));\n    }\n\n    for (let i = 1; i < 3; i++) {\n      polygons.push(polygons[1].copy().rotate((i * 120 * Math.PI) / 180));\n    }\n\n    const kG1 = new KPolygonGroup(\n      polygons,\n      [\n        kgrid.createKPoint([-2, -4, 2, 0]),\n        kgrid.createKPoint([-2, 2, -4, 0]),\n        kgrid.createKPoint([4, 2, 2, 0])\n      ],\n      [\n        kgrid.createKPoint([0, 0, 0, 0]),\n        kgrid.createKPoint([0, 1, -1, 0]),\n        kgrid.createKPoint([1, 1, 0, 0])\n      ]\n    );\n\n    const t1Polygons = [\n      new KPolygon(\n        [\n          kgrid.createKPoint([0, 0, 0, 0]),\n          kgrid.createKPoint([0, 1, -1, 0]),\n          kgrid.createKPoint([1, 1, 0, 0])\n        ],\n        kG1\n      )\n    ];\n\n    for (let i = 1; i < 6; i++) {\n      // polygons.push(polygons[1].copy().rotate((i * 120 * Math.PI) / 180));\n      t1Polygons.push(t1Polygons[0].copy().rotate((i * 60 * Math.PI) / 180));\n    }\n\n    // t1Polygons.push(t1Polygons[0].copy().rotate((-60 * Math.PI) / 180));\n\n    // const kG2 = kG1\n    //   .copy()\n    //   .translate({ dBat: -1, dCat: 1 })\n    //   .translate({ dAnt: -1, dBat: -1 });\n\n    // kG1\n    //   .rotate((60 * Math.PI) / 180)\n    // .translate({ dAnt: 2, dBat: 4, dCat: -2 });\n    //   .translate({ dAnt: -1, dBat: -1 });\n\n    setPolygonGroups([kG1]);\n\n    setT1Polygons(t1Polygons);\n\n    // kgrid.rotateKPoint(\n    //   {\n    //     ant: -2,\n    //     bat: -1,\n    //     cat: -1,\n    //     dog: 0\n    //   },\n    //   (60 * Math.PI) / 180\n    // );\n\n    const pt1A = kgrid.createKPoint([0, 0, 0, 0]);\n    const pt2A = kgrid.createKPoint([0, 1, -1, 0]);\n\n    const lenA = Math.sqrt(\n      Math.pow(pt2A.x - pt1A.x, 2) + Math.pow(pt2A.y - pt1A.y, 2)\n    );\n\n    const pt1B = kgrid.createKPoint([-2, -4, 2, 0]);\n    const pt2B = kgrid.createKPoint([-2, 2, -4, 0]);\n\n    const lenB = Math.sqrt(\n      Math.pow(pt2B.x - pt1B.x, 2) + Math.pow(pt2B.y - pt1B.y, 2)\n    );\n\n    console.log(\"LEN\", lenA, lenB, lenB / lenA);\n\n    const pt1C = kgrid.createKPoint([-2, -4, 2, 0]);\n    const pt2C = kgrid.createKPoint([0, 0, 0, 0]);\n\n    const dx = pt2C.x - pt1C.x;\n    const dy = pt2C.y - pt1C.y;\n\n    console.log(dx, dy);\n\n    const { pts, lines } = kgrid.getGrid();\n\n    setGridPoints(pts);\n    setGridLines(lines);\n\n    svgNode.addEventListener(\"mousemove\", mouseMove);\n\n    return () => {\n      svgNode.removeEventListener(\"mousemove\", mouseMove);\n    };\n  }, []);\n\n  return (\n    <div>\n      <svg ref={cRef} width={canvasDims.width} height={canvasDims.height}>\n        <g\n          transform={`translate(${canvasDims.width / 2}, ${canvasDims.height /\n            2})`}\n        >\n          <GridLines lines={gridLines} />\n          <GridPoints points={gridPoints} activePoint={activePoint} />\n          {/* {polygonGroups.map((kPolygonGroup, idx) => (\n            <PolygonGroup drawHull key={idx} kPolygonGroup={kPolygonGroup} />\n          ))} */}\n          {t1Polygons.map((kPolygon, idx) => (\n            <Polygon key={idx} kPolygon={kPolygon} />\n          ))}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nconst PolygonGroup = React.memo(({ kPolygonGroup, drawHull = false }) => {\n  return (\n    <g>\n      {kPolygonGroup.kPolygons.map((kPolygon, idx) => (\n        <Polygon key={idx} kPolygon={kPolygon} tMat={kPolygonGroup.tMat} />\n      ))}\n      {drawHull && (\n        <path\n          d={kPolygonGroup.hullString()}\n          fill={\"none\"}\n          strokeDasharray=\"10\"\n          // fillOpacity={0.5}\n          stroke={\"#fc839f\"}\n          strokeWidth={3}\n          strokeLinejoin=\"round\"\n        />\n      )}\n    </g>\n  );\n});\n\nconst Polygon = React.memo(({ kPolygon, tMat }) => {\n  if (kPolygon.color instanceof KPolygonGroup) {\n    console.log(\"POL\", kPolygon.tMat);\n    const tMat = kPolygon.tMat();\n    return (\n      <>\n        {kPolygon.color.kPolygons.map((kPolygon, idx) => (\n          <Polygon key={idx} kPolygon={kPolygon} tMat={tMat} />\n        ))}\n      </>\n    );\n  } else {\n    return (\n      <path\n        d={kPolygon.pathString(tMat)}\n        fill={kPolygon.color}\n        fillOpacity={0.4}\n        stroke={\"black\"}\n        strokeWidth={3}\n        strokeLinejoin=\"round\"\n      />\n    );\n  }\n});\n\nexport default Canvas;\n","import React, { useState } from \"react\";\nimport Canvas from \"./canvas\";\n\nfunction App() {\n  const [activePt, setActivePt] = useState(null);\n  const mouseOver = pt => {\n    setActivePt(pt);\n  };\n\n  return (\n    <div>\n      <div className=\"mx-auto mt-10 shadow flex flex-row w-8/12\">\n        <Canvas mouseOver={mouseOver} />\n        {activePt && (\n          <ul>\n            <li>ANT: {activePt.ant}</li>\n            <li>BAT: {activePt.bat}</li>\n            <li>CAT: {activePt.cat}</li>\n            <li>DOG: {activePt.dog}</li>\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}