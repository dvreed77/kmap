{"version":3,"sources":["colors.js","utils.js","kcanvas.js","canvas.js","App.js","index.js"],"names":["colors","GridGenerator","SQRT_3","Math","sqrt","isOdd","d","nCols","nRows","cStart","cEnd","rStart","rEnd","i","j","KGrid","width","height","this","setup2","N_HEX_COLS","HEX_W","F","H","G","N_HEX_ROWS","ceil","createGrid","createLines","density","pts","lines","x0","ant","bat","cat","dog","y0","dx","dy","angle","PI","cos","sin","xD","yD","push","x","y","angle1","angle2","dx1","dy1","dx2","dy2","kP","j0","Canvas","gridDensity","mouseOver","cRef","useRef","useState","kgrid","setKGrid","shape","setShape","activeIdx","setActiveIdx","useEffect","kPt","convertHexPointToCanvasPoint","setActive","pt","idx","genGrid","polygons","Object","entries","R","map","v","path","d3","moveTo","length","lineTo","closePath","toString","shapePath","ref","line","key","x1","y1","x2","y2","stroke","fill","fillOpacity","cx","cy","r","onMouseOver","onMouseLeave","App","activePt","setActivePt","setGridDensity","className","min","max","defaultValue","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a25488b5.chunk.js","sourcesContent":["{\n  /* <palette>\n<color name='Illustration-1' rgb='BFCDD9' r='190' g='204' b='216' />\n<color name='Illustration-2' rgb='D9BD6A' r='216' g='189' b='106' />\n<color name='Illustration-3' rgb='F2DEA2' r='242' g='222' b='162' />\n<color name='Illustration-4' rgb='BF9B7A' r='191' g='154' b='122' />\n<color name='Illustration-5' rgb='734C36' r='114' g='76' b='53' />\n</palette> */\n}\n\nexport const colors = {\n  base: \"#F2FBFD\",\n  dark: \"#002C3E\",\n  a1: \"#049DD9\",\n  a2: \"#04B2D9\",\n  highlight: \"#F20544\",\n  highlight_dull: \"#FB93AF\"\n};\n","export const SQRT_3 = Math.sqrt(3);\n\nexport const isOdd = d => !!(d % 2);\n\nexport function* GridGenerator(nCols, nRows) {\n  let cStart, cEnd;\n  if (isOdd(nCols)) {\n    cStart = -(nCols - 1) / 2 - 1;\n    cEnd = (nCols - 1) / 2 + 1;\n  } else {\n    cStart = -nCols / 2 - 1;\n    cEnd = nCols / 2 + 1;\n  }\n\n  let rStart, rEnd;\n  if (isOdd(nCols)) {\n    rStart = -(nRows - 1) / 2;\n    rEnd = (nRows - 1) / 2 + 1;\n  } else {\n    rStart = -nRows / 2;\n    rEnd = nRows / 2 + 1;\n  }\n\n  for (let i = cStart; i < cEnd; i++) {\n    for (let j = rStart; j < rEnd; j++) {\n      yield [i, j];\n    }\n  }\n}\n","import { SQRT_3, GridGenerator, isOdd } from \"./utils\";\n\nclass KGrid {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n\n    this.setup2();\n  }\n\n  setup1() {\n    this.N_HEX_COLS = 7;\n    this.HEX_W = this.width / this.N_HEX_COLS;\n    this.F = this.HEX_W / (2 * SQRT_3);\n    this.H = this.HEX_W / SQRT_3;\n    this.G = this.HEX_W / 2;\n    this.N_HEX_ROWS = Math.ceil(this.height / (this.F + this.H));\n\n    this.createGrid();\n    this.createLines();\n  }\n\n  setup2() {\n    this.F = 32;\n    this.H = 2 * this.F;\n    this.G = SQRT_3 * this.F;\n\n    this.HEX_W = 2 * this.G;\n    this.N_HEX_COLS = Math.ceil(this.width / this.HEX_W);\n    this.N_HEX_ROWS = Math.ceil(this.height / (this.F + this.H));\n  }\n\n  genGrid(density = 1) {\n    const pts = [];\n    const lines = [];\n\n    this.F = 32 / density;\n    this.H = 2 * this.F;\n    this.G = SQRT_3 * this.F;\n\n    this.HEX_W = 2 * this.G;\n    this.N_HEX_COLS = Math.ceil(this.width / this.HEX_W);\n    this.N_HEX_ROWS = Math.ceil(this.height / (this.F + this.H));\n\n    for (const [i, j] of GridGenerator(this.N_HEX_COLS, this.N_HEX_ROWS)) {\n      let x0, ant, bat;\n      if (isOdd(j)) {\n        x0 = i * this.HEX_W + this.HEX_W / 2 + this.width / 2;\n        ant = (j + 1) / 2 + i;\n        bat = (1 - j) / 2 + i;\n      } else {\n        x0 = i * this.HEX_W + this.width / 2;\n        ant = j / 2 + i;\n        bat = i - j / 2;\n      }\n\n      for (let d = 0; d < 6; d++) {\n        const cat = j;\n        const dog = d;\n\n        const y0 = j * (this.F + this.H) + this.height / 2;\n\n        let dx, dy;\n        if (d === 0) {\n          dx = 0;\n          dy = 0;\n        } else {\n          const angle = ((-30 * d + 150) * Math.PI) / 180;\n          if (isOdd(d)) {\n            dx = this.G * Math.cos(angle);\n            dy = -this.G * Math.sin(angle);\n          } else {\n            dx = this.H * Math.cos(angle);\n            dy = -this.H * Math.sin(angle);\n          }\n        }\n\n        const xD = x0 + dx;\n        const yD = y0 + dy;\n\n        pts.push({\n          i,\n          j,\n          x: xD,\n          y: yD,\n          ant,\n          bat,\n          cat,\n          dog\n        });\n\n        // Gen Spokes\n        for (let d = 0; d < 12; d++) {\n          const angle = (d * 2 * Math.PI) / 12;\n\n          let dx, dy;\n\n          if (d % 2) {\n            dx = this.H * Math.cos(angle);\n            dy = -this.H * Math.sin(angle);\n          } else {\n            dx = this.G * Math.cos(angle);\n            dy = -this.G * Math.sin(angle);\n          }\n\n          lines.push([\n            [x0, y0],\n            [x0 + dx, y0 + dy]\n          ]);\n        }\n\n        // Gen Edges\n        // See Page 60 of notes\n        for (let d = 0; d < 6; d++) {\n          const angle1 = ((-30 * d + 150) * Math.PI) / 180;\n          const angle2 = ((-30 * (d + 1) + 150) * Math.PI) / 180;\n\n          let dx1, dy1, dx2, dy2;\n\n          if (d % 2) {\n            dx1 = this.G * Math.cos(angle1);\n            dy1 = -this.G * Math.sin(angle1);\n            dx2 = this.H * Math.cos(angle2);\n            dy2 = -this.H * Math.sin(angle2);\n          } else {\n            dx1 = this.H * Math.cos(angle1);\n            dy1 = -this.H * Math.sin(angle1);\n            dx2 = this.G * Math.cos(angle2);\n            dy2 = -this.G * Math.sin(angle2);\n          }\n\n          lines.push([\n            [x0 + dx1, y0 + dy1],\n            [x0 + dx2, y0 + dy2]\n          ]);\n        }\n      }\n    }\n\n    return {\n      pts,\n      lines\n    };\n  }\n\n  convertHexPointToCanvasPoint(kP) {\n    const j0 = kP.cat;\n    let i0, x0;\n    if (j0 % 2) {\n      i0 = kP.ant - (j0 + 1) / 2;\n      x0 = i0 * this.HEX_W + this.HEX_W / 2 + this.width / 2;\n    } else {\n      i0 = kP.ant - j0 / 2;\n      x0 = i0 * this.HEX_W + this.width / 2;\n    }\n\n    const y0 = (j0 * 3 * this.HEX_W) / (2 * SQRT_3) + this.height / 2;\n\n    let dx, dy;\n    if (kP.dog === 0) {\n      dx = 0;\n      dy = 0;\n    } else {\n      const angle = ((-30 * kP.dog + 150) * Math.PI) / 180;\n      if (kP.dog % 2) {\n        dx = this.G * Math.cos(angle);\n        dy = -this.G * Math.sin(angle);\n      } else {\n        dx = this.H * Math.cos(angle);\n        dy = -this.H * Math.sin(angle);\n      }\n    }\n\n    return [x0 + dx, y0 + dy];\n  }\n}\n\nclass KPoint {\n  constructor(ant, bat, cat, dog) {\n    this.ant = ant;\n    this.bat = bat;\n    this.cat = cat;\n    this.dog = dog;\n  }\n}\n\nclass KPolygon {\n  constructor(pts) {}\n}\n\nexport default KGrid;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { colors } from \"./colors\";\nimport * as R from \"ramda\";\nimport KGrid from \"./kcanvas\";\n\nconst Canvas = ({ gridDensity, mouseOver }) => {\n  const cRef = useRef();\n  const [width, setWidth] = useState(800);\n  const [height, setHeight] = useState(500);\n  const [points, setPoints] = useState([]);\n  const [kgrid, setKGrid] = useState(null);\n\n  const [shape, setShape] = useState([]);\n  const [activeIdx, setActiveIdx] = useState(null);\n\n  useEffect(() => {\n    const kgrid = new KGrid(width, height);\n\n    setKGrid(kgrid);\n\n    const shape = [\n      { ant: 3, bat: 1, cat: 2, dog: 0 },\n      { ant: -1, bat: -3, cat: 2, dog: 0 },\n      { ant: -1, bat: 1, cat: -2, dog: 0 }\n    ];\n\n    const pts = [];\n    for (let kPt of shape) {\n      pts.push(kgrid.convertHexPointToCanvasPoint(kPt));\n    }\n    setShape(pts);\n  }, []);\n\n  const setActive = (pt, idx) => {\n    mouseOver(pt);\n    setActiveIdx(idx);\n  };\n\n  if (!kgrid) return <div></div>;\n\n  const { pts, lines } = kgrid.genGrid(gridDensity);\n\n  const polygons = Object.entries(R.groupBy(d => `${d.i}.${d.j}`)(pts)).map(\n    ([k, v]) => {\n      var path = d3.path();\n      path.moveTo(v[0].x, v[0].y);\n      for (let i = 0; i < v.length; i++) {\n        path.lineTo(v[i].x, v[i].y);\n      }\n      path.closePath();\n\n      return path.toString();\n    }\n  );\n\n  var path = d3.path();\n  if (shape.length) {\n    path.moveTo(shape[0][0], shape[0][1]);\n    for (let i = 0; i < shape.length; i++) {\n      path.lineTo(shape[i][0], shape[i][1]);\n    }\n    path.closePath();\n  }\n\n  const shapePath = path.toString();\n\n  return (\n    <div>\n      <svg ref={cRef} width={width} height={height}>\n        {lines.map((line, idx) => (\n          <line\n            key={idx}\n            x1={line[0][0]}\n            y1={line[0][1]}\n            x2={line[1][0]}\n            y2={line[1][1]}\n            stroke={\"#eee\"}\n          />\n        ))}\n        {polygons.map((path, idx) => (\n          <path key={idx} d={path} fill={\"#eee\"} fillOpacity={0.5} />\n        ))}\n        {pts.map((pt, idx) => (\n          <circle\n            key={idx}\n            cx={pt.x}\n            cy={pt.y}\n            r={idx === activeIdx ? 5 : 2}\n            fill={idx === activeIdx ? colors.highlight : \"#ddd\"}\n          />\n        ))}\n        <path d={shapePath} fill={\"green\"} fillOpacity={0.4} />\n        {pts.map((pt, idx) => (\n          <circle\n            key={idx}\n            cx={pt.x}\n            cy={pt.y}\n            r={6}\n            fill={\"black\"}\n            fillOpacity=\"0\"\n            onMouseOver={() => setActive(pt, idx)}\n            onMouseLeave={() => setActive(null)}\n          />\n        ))}\n      </svg>\n    </div>\n  );\n};\n\nexport default Canvas;\n","import React, { useState } from \"react\";\nimport { InputNumber } from \"antd\";\nimport Canvas from \"./canvas\";\n\nfunction App() {\n  const [activePt, setActivePt] = useState(null);\n  const [gridDensity, setGridDensity] = useState(1);\n  const mouseOver = pt => {\n    setActivePt(pt);\n  };\n\n  return (\n    <div>\n      <div className=\"mx-auto mt-10 shadow flex flex-row w-8/12\">\n        <Canvas gridDensity={gridDensity} mouseOver={mouseOver} />\n\n        <InputNumber\n          min={1}\n          max={4}\n          defaultValue={1}\n          onChange={setGridDensity}\n        />\n        {activePt && (\n          <ul>\n            <li>ANT: {activePt.ant}</li>\n            <li>BAT: {activePt.bat}</li>\n            <li>CAT: {activePt.cat}</li>\n            <li>DOG: {activePt.dog}</li>\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}