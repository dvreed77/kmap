{"version":3,"sources":["utils/generateGrid.js","utils/index.js","kcanvas.js","colors.js","Grid.js","shapes/shape1.js","shapes/shape3.js","shapes/shape2.js","shapes/shape4.js","canvas.js","routes/page1/canvas.jsx","routes/page1/index.jsx","routes/page2/Boundary.jsx","routes/page2/canvas.jsx","routes/page2/sidebar.tsx","routes/page2/GridPoints.tsx","routes/page2/Polygon.tsx","routes/page2/index.tsx","App.js","index.tsx"],"names":["GridGenerator","SQRT_3","Math","sqrt","isOdd","d","nCols","nRows","console","log","cStart","cEnd","rStart","rEnd","idx","i","j","KGrid","this","cWidth","cHeight","hexDims","qTree","d3QuadTree","x","y","setWidth","width","hexWidth","G","F","H","height","generateGrid","gridPoints","ant","bat","cat","dog","convertPt","push","addAll","isNil","dx","dy","x0","y0","angle","PI","cos","sin","kPoints","lines","d3","setup","HEX_W","N_HEX_COLS","ceil","N_HEX_ROWS","genGrid","kPoint","Array","isArray","length","zipObject","find","xD","yD","KPoint","angle1","angle2","dx1","dy1","dx2","dy2","pts","kgrid","rotate","rotationAngle","r","pow","newAngle","atan2","newX","newY","translate","dAnt","dBat","dCat","dDog","createKPoint","KPolygon","color","hull1","hull","hull2","triangle1","slice","map","triangle2","fromTriangles","translation","kPt","aMin","min","bMin","cMin","aMax","max","bMax","cMax","tMat","path","points","newPoints","applyToPoints","moveTo","forEach","lineTo","closePath","toString","KPolygonGroup","kPolygons","kPolygon","kP","copy","flatMap","polygonHull","pt","colors","base","dark","a1","a2","highlight","highlight_dull","A","B","C","D","E","GridLines","React","memo","line","key","x1","y1","x2","y2","stroke","GridPoints","activePoint","cx","cy","fill","createShape","octagon","triangle","fillShape","polygons","shape1","shape2","shape3","shape4","shape5","p1","p","p2","p3","p4","p5","kG1","Shape1","Shape3","t1Polygons","pg1","Shape2","Polygon","kPolygonGroup","drawHull","tMat2","compose","pathString","fillOpacity","strokeWidth","strokeLinejoin","Canvas","mouseOver","cRef","useRef","useState","canvasDims","setActivePoint","setGridPoints","setGridLines","kGrid","setPolygons","clickedPoints","setClickedPoints","mouseMove","current","getBoundingClientRect","rX","rY","mouseClick","useCallback","keyPress","useEffect","clientWidth","clientHeight","intitialize","svgNode","pG","pgs","Shape4","getGrid","addEventListener","window","removeEventListener","JSON","stringify","ref","transform","poly","setActive2","setActive","setState","hover","setHover","active","menu","Item","onClick","overlay","trigger","onMouseOver","onMouseLeave","event","stopPropagation","className","drawingPoly","setCanvasDims","activePolygon","setActivePolygon","gridLines","canvasState","setCanvasState","parentNode","center","draw","clientX","clientY","onMouseMove","nP","position","UnFinishedPolygon","addPoint","Page1","setAppState","setDrawingPoly","icon","faPlusSquare","size","Boundary","children","columns","rows","onMouseClick","dims","setDims","setKGrid","targetRef","parentElement","mX","mY","cursorPt","Sidebar","setAction","onSave","placement","title","action","faSave","nPts","useMemo","id","closed","onDelete","setColor","onDuplicate","dPath","d3Path","genPathString","data","SubMenu","style","R","v","backgroundColor","kPts","octagon2","lensById","pred","newVal","array","index","movePolygon","polygon_","polygon","refPt","Page2","localStorage","getItem","parse","newId","random","setItem","Header","modalVisible","setModalVisible","visible","footer","closable","onCancel","href","faGithubSquare","App","activePt","setActivePt","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c334872e.chunk.js","sourcesContent":["import { isNil } from \"ramda\";\nimport { quadtree as d3QuadTree } from \"d3\";\nexport const SQRT_3 = Math.sqrt(3);\n\nexport const isOdd = d => !!(d % 2);\n\nexport function* GridGenerator(nCols, nRows) {\n  console.log(\"nCols\", nCols);\n  console.log(\"nRows\", nRows);\n\n  // See page 68 of notes\n  let cStart, cEnd;\n  if (isOdd(nCols)) {\n    cStart = -(nCols + 1) / 2;\n    cEnd = (nCols + 1) / 2 - 1;\n  } else {\n    cStart = -nCols / 2 - 1;\n    cEnd = nCols / 2;\n  }\n\n  console.log(\"cStart->cEnd\", cStart, cEnd);\n\n  let rStart, rEnd;\n  if (isOdd(nRows)) {\n    rStart = -(nRows + 1) / 2 + 1;\n    rEnd = (nRows + 1) / 2;\n  } else {\n    rStart = -nRows / 2;\n    rEnd = nRows / 2;\n  }\n\n  console.log(\"rStart-rEnd\", rStart, rEnd);\n\n  let idx = 0;\n  for (let i = cStart; i <= cEnd; i++) {\n    for (let j = rStart; j <= rEnd; j++) {\n      yield [idx, i, j];\n      idx++;\n    }\n  }\n}\n\nexport const KGrid = function(nCols, nRows) {\n  this.nCols = nCols;\n  this.nRows = nRows;\n  this.cWidth = null;\n  this.cHeight = null;\n  this.hexDims = {};\n\n  this.qTree = d3QuadTree()\n    .x(d => d.x)\n    .y(d => d.y);\n\n  this.setWidth = function(width) {\n    this.cWidth = width;\n\n    const hexWidth = this.cWidth / this.nCols;\n\n    const G = hexWidth / 2;\n    const F = G / SQRT_3;\n    const H = 2 * F;\n\n    this.hexDims = {\n      hexWidth,\n      G,\n      F,\n      H\n    };\n    this.cHeight = this.nRows * (F + H);\n\n    return {\n      width: this.cWidth,\n      height: this.cHeight\n    };\n  };\n\n  this.generateGrid = function() {\n    const gridPoints = [];\n    // const gridLines = [];\n\n    for (const [idx, i, j] of GridGenerator(nCols, nRows)) {\n      let ant, bat;\n\n      const cat = j;\n\n      // Page 54 in notes\n      if (isOdd(j)) {\n        ant = (j + 1) / 2 + i;\n        bat = (1 - j) / 2 + i;\n      } else {\n        ant = j / 2 + i;\n        bat = i - j / 2;\n      }\n\n      for (let d = 0; d < 6; d++) {\n        const dog = d;\n\n        const [x, y] = this.convertPt({ i, j, d });\n\n        gridPoints.push({\n          idx: `${idx}.${d}`,\n          i,\n          j,\n          ant,\n          bat,\n          cat,\n          dog,\n          x,\n          y\n        });\n\n        // Gen Spokes\n        // for (let d = 0; d < 12; d++) {\n        //   const angle = (d * 2 * Math.PI) / 12;\n\n        //   let dx, dy;\n\n        //   if (d % 2) {\n        //     dx = this.H * Math.cos(angle);\n        //     dy = -this.H * Math.sin(angle);\n        //   } else {\n        //     dx = this.G * Math.cos(angle);\n        //     dy = -this.G * Math.sin(angle);\n        //   }\n\n        //   lines.push([\n        //     [x0, y0],\n        //     [x0 + dx, y0 + dy]\n        //   ]);\n        // }\n\n        // Gen Edges\n        // See Page 60 of notes\n        // for (let d = 0; d < 6; d++) {\n        //   const angle1 = ((-30 * d + 150) * Math.PI) / 180;\n        //   const angle2 = ((-30 * (d + 1) + 150) * Math.PI) / 180;\n\n        //   let dx1, dy1, dx2, dy2;\n\n        //   if (d % 2) {\n        //     dx1 = this.G * Math.cos(angle1);\n        //     dy1 = -this.G * Math.sin(angle1);\n        //     dx2 = this.H * Math.cos(angle2);\n        //     dy2 = -this.H * Math.sin(angle2);\n        //   } else {\n        //     dx1 = this.H * Math.cos(angle1);\n        //     dy1 = -this.H * Math.sin(angle1);\n        //     dx2 = this.G * Math.cos(angle2);\n        //     dy2 = -this.G * Math.sin(angle2);\n        //   }\n\n        //   lines.push([\n        //     [x0 + dx1, y0 + dy1],\n        //     [x0 + dx2, y0 + dy2]\n        //   ]);\n        // }\n      }\n    }\n\n    this.qTree.addAll(gridPoints);\n\n    return gridPoints;\n  };\n\n  this.convertPt = function({ ant, bat, cat, dog, i, j, d }) {\n    if (isNil(j)) {\n      j = cat;\n    }\n\n    if (isNil(i)) {\n      i = isOdd(j) ? ant - (j + 1) / 2 : ant - j / 2;\n    }\n    if (isNil(d)) {\n      d = dog;\n    }\n    const { hexWidth, F, G, H } = this.hexDims;\n    // see page 54 of notes\n    const x0 = isOdd(j) ? i * hexWidth + hexWidth / 2 : i * hexWidth;\n\n    const y0 = j * (F + H);\n\n    let dx, dy;\n    if (d === 0) {\n      dx = 0;\n      dy = 0;\n    } else {\n      const angle = ((-30 * d + 150) * Math.PI) / 180;\n      if (isOdd(d)) {\n        dx = G * Math.cos(angle);\n        dy = -G * Math.sin(angle);\n      } else {\n        dx = H * Math.cos(angle);\n        dy = -H * Math.sin(angle);\n      }\n    }\n\n    const xD = x0 + dx;\n    const yD = y0 + dy;\n\n    return [xD, yD];\n  };\n};\n","import { path as d3Path } from \"d3\";\n\nexport * from \"./generateGrid\";\n\nexport const SQRT_3 = Math.sqrt(3);\n\nexport const isOdd = d => !!(d % 2);\n\nexport const genPathString = (pts, closed = true) => {\n  var path = d3Path();\n\n  if (pts.length) {\n    path.moveTo(pts[0][0], pts[0][1]);\n    pts.forEach(([x, y]) => path.lineTo(x, y));\n    if (closed) path.closePath();\n    // path.closePath();\n  }\n  return path.toString();\n};\n","import { SQRT_3, GridGenerator, isOdd } from \"./utils\";\nimport { fromTriangles, applyToPoints } from \"transformation-matrix\";\nimport * as d3 from \"d3\";\nimport { find, zipObject } from \"lodash\";\nimport { polygonHull } from \"d3-polygon\";\n\n// Using https://github.com/chrvadala/transformation-matrix for transformations\nclass KGrid {\n  constructor() {\n    this.kPoints = [];\n    this.lines = [];\n\n    const qTree = d3\n      .quadtree()\n      .x(d => d.x)\n      .y(d => d.y);\n\n    this.qTree = qTree;\n  }\n\n  intitialize(width, height) {\n    this.width = width;\n    this.height = height;\n\n    this.setup();\n  }\n\n  setup() {\n    this.F = 20;\n    this.H = 2 * this.F;\n    this.G = SQRT_3 * this.F;\n\n    this.HEX_W = 2 * this.G;\n    this.N_HEX_COLS = Math.ceil(this.width / this.HEX_W);\n    this.N_HEX_ROWS = Math.ceil(this.height / (this.F + this.H));\n\n    this.genGrid();\n  }\n\n  // THIS DRAWS THE POLYGON THAT REPRESENT DOG COORDS\n  // const polygons = Object.entries(R.groupBy(d => `${d.i}.${d.j}`)(pts)).map(\n  //   ([k, v]) => {\n  //     var path = d3.path();\n  //     path.moveTo(v[0].x, v[0].y);\n  //     for (let i = 0; i < v.length; i++) {\n  //       path.lineTo(v[i].x, v[i].y);\n  //     }\n  //     path.closePath();\n\n  //     return path.toString();\n  //   }\n  // );\n\n  // var path = d3.path();\n  // if (shape.length) {\n  //   path.moveTo(shape[0][0], shape[0][1]);\n  //   for (let i = 0; i < shape.length; i++) {\n  //     path.lineTo(shape[i][0], shape[i][1]);\n  //   }\n  //   path.closePath();\n  // }\n\n  // const shapePath = path.toString();\n\n  createKPoint(kPoint) {\n    if (Array.isArray(kPoint) && kPoint.length === 4) {\n      kPoint = zipObject([\"ant\", \"bat\", \"cat\", \"dog\"], kPoint);\n    }\n    return find(this.kPoints, kPoint);\n  }\n\n  genGrid() {\n    const kPoints = [];\n    const lines = [];\n\n    for (const [idx, i, j] of GridGenerator(this.N_HEX_COLS, this.N_HEX_ROWS)) {\n      let x0, ant, bat;\n      if (isOdd(j)) {\n        x0 = i * this.HEX_W + this.HEX_W / 2;\n        ant = (j + 1) / 2 + i;\n        bat = (1 - j) / 2 + i;\n      } else {\n        x0 = i * this.HEX_W;\n        ant = j / 2 + i;\n        bat = i - j / 2;\n      }\n\n      for (let d = 0; d < 6; d++) {\n        const cat = j;\n        const dog = d;\n\n        const y0 = j * (this.F + this.H);\n\n        let dx, dy;\n        if (d === 0) {\n          dx = 0;\n          dy = 0;\n        } else {\n          const angle = ((-30 * d + 150) * Math.PI) / 180;\n          if (isOdd(d)) {\n            dx = this.G * Math.cos(angle);\n            dy = -this.G * Math.sin(angle);\n          } else {\n            dx = this.H * Math.cos(angle);\n            dy = -this.H * Math.sin(angle);\n          }\n        }\n\n        const xD = x0 + dx;\n        const yD = y0 + dy;\n\n        kPoints.push(\n          KPoint(\n            {\n              idx: `${idx}.${d}`,\n              i,\n              j,\n              x: xD,\n              y: yD,\n              ant,\n              bat,\n              cat,\n              dog\n            },\n            this\n          )\n        );\n\n        // Gen Spokes\n        for (let d = 0; d < 12; d++) {\n          const angle = (d * 2 * Math.PI) / 12;\n\n          let dx, dy;\n\n          if (d % 2) {\n            dx = this.H * Math.cos(angle);\n            dy = -this.H * Math.sin(angle);\n          } else {\n            dx = this.G * Math.cos(angle);\n            dy = -this.G * Math.sin(angle);\n          }\n\n          lines.push([\n            [x0, y0],\n            [x0 + dx, y0 + dy]\n          ]);\n        }\n\n        // Gen Edges\n        // See Page 60 of notes\n        for (let d = 0; d < 6; d++) {\n          const angle1 = ((-30 * d + 150) * Math.PI) / 180;\n          const angle2 = ((-30 * (d + 1) + 150) * Math.PI) / 180;\n\n          let dx1, dy1, dx2, dy2;\n\n          if (d % 2) {\n            dx1 = this.G * Math.cos(angle1);\n            dy1 = -this.G * Math.sin(angle1);\n            dx2 = this.H * Math.cos(angle2);\n            dy2 = -this.H * Math.sin(angle2);\n          } else {\n            dx1 = this.H * Math.cos(angle1);\n            dy1 = -this.H * Math.sin(angle1);\n            dx2 = this.G * Math.cos(angle2);\n            dy2 = -this.G * Math.sin(angle2);\n          }\n\n          lines.push([\n            [x0 + dx1, y0 + dy1],\n            [x0 + dx2, y0 + dy2]\n          ]);\n        }\n      }\n    }\n\n    this.qTree.addAll(kPoints);\n    this.kPoints = kPoints;\n    this.lines = lines;\n  }\n\n  getGrid() {\n    return {\n      pts: this.kPoints,\n      lines: this.lines\n    };\n  }\n}\n\nexport const KPoint = (kPoint, kgrid) => {\n  kPoint.rotate = rotationAngle => {\n    const { x, y } = kPoint;\n\n    const r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n    const angle = Math.atan2(y, x);\n    const newAngle = angle + rotationAngle;\n\n    const newX = r * Math.cos(newAngle);\n    const newY = r * Math.sin(newAngle);\n\n    return kgrid.qTree.find(newX, newY);\n  };\n\n  kPoint.translate = ({ dAnt = 0, dBat = 0, dCat = 0, dDog = 0 }) => {\n    return kgrid.createKPoint({\n      ant: kPoint.ant + dAnt,\n      bat: kPoint.bat + dBat,\n      cat: kPoint.cat + dCat,\n      dog: kPoint.dog + dDog\n    });\n  };\n\n  return kPoint;\n};\n\nexport class KPolygon {\n  constructor(kPoints, color) {\n    this.kPoints = kPoints;\n    this.color = color;\n  }\n\n  tMat() {\n    const hull1 = this.color.hull;\n    const hull2 = this.kPoints;\n\n    // get transMatrix from hull1 to hull2\n    const triangle1 = hull1.slice(0, 3).map(d => [d.x, d.y]);\n    const triangle2 = hull2.slice(0, 3).map(d => [d.x, d.y]);\n    return fromTriangles(triangle1, triangle2);\n  }\n\n  copy() {\n    return new KPolygon(this.kPoints, this.color);\n  }\n\n  rotate(rotationAngle) {\n    this.kPoints = this.kPoints.map(d => d.rotate(rotationAngle));\n    return this;\n  }\n\n  translate(translation) {\n    this.kPoints = this.kPoints.map(d => d.translate(translation));\n    return this;\n  }\n\n  position({ ant, bat, cat }) {\n    // console.log(this.kPoints[0].ant, this.kPoints[0].bat, this.kPoints[0].cat);\n    // console.log(ant, bat, cat);\n    const dAnt = ant - this.kPoints[0].ant;\n    const dBat = bat - this.kPoints[0].bat;\n    const dCat = cat - this.kPoints[0].cat;\n\n    // console.log(dAnt, dBat, dCat);\n\n    this.kPoints = this.kPoints.map(kPt => kPt.translate({ dAnt, dBat, dCat }));\n\n    // console.log(this.kPoints[0].ant, this.kPoints[0].bat, this.kPoints[0].cat);\n    // console.log(ant, bat, cat);\n\n    // console.log(\"====\");\n\n    return this;\n  }\n\n  center() {\n    const aMin = Math.min(...this.kPoints.map(d => d.ant));\n    const bMin = Math.min(...this.kPoints.map(d => d.bat));\n    const cMin = Math.min(...this.kPoints.map(d => d.cat));\n\n    const aMax = Math.max(...this.kPoints.map(d => d.ant));\n    const bMax = Math.max(...this.kPoints.map(d => d.bat));\n    const cMax = Math.max(...this.kPoints.map(d => d.cat));\n\n    this.kPoints = this.kPoints.map(d =>\n      d.translate({\n        dAnt: -(aMin + aMax) / 2,\n        dBat: -(bMin + bMax) / 2,\n        dCat: -(cMin + cMax) / 2\n      })\n    );\n    return this;\n  }\n\n  pathString(tMat) {\n    var path = d3.path();\n\n    const points = this.kPoints.map(d => [d.x, d.y]);\n\n    const newPoints = tMat ? applyToPoints(tMat, points) : points;\n\n    if (newPoints.length) {\n      path.moveTo(newPoints[0][0], newPoints[0][1]);\n      newPoints.forEach(([x, y]) => path.lineTo(x, y));\n      path.closePath();\n    }\n\n    return path.toString();\n  }\n}\n\nexport class KPolygonGroup {\n  constructor(kPolygons = [], hull = []) {\n    this.kPolygons = kPolygons;\n    this.hull = hull;\n  }\n\n  add(kPolygon) {\n    this.kPolygons.push(kPolygon);\n  }\n\n  copy() {\n    return new KPolygonGroup(this.kPolygons.map(kP => kP.copy()));\n  }\n\n  rotate(rotationAngle) {\n    this.kPolygons = this.kPolygons.map(kP => kP.rotate(rotationAngle));\n    return this;\n  }\n\n  hullString() {\n    const pts = this.kPolygons.flatMap(kPolygon =>\n      kPolygon.kPoints.map(kPoint => kPoint)\n    );\n\n    const hull = polygonHull(\n      pts.map(kPoint => [kPoint.x, kPoint.y, kPoint.idx])\n    );\n\n    console.log(\n      pts,\n      hull,\n      pts.find(pt => pt.idx === \"96.0\")\n    );\n\n    var path = d3.path();\n\n    if (this.hull.length) {\n      path.moveTo(this.hull[0].x, this.hull[0].y);\n      this.hull.forEach(kP => path.lineTo(kP.x, kP.y));\n      path.closePath();\n    }\n\n    return path.toString();\n  }\n\n  translate(translation) {\n    this.kPolygons = this.kPolygons.map(kP => kP.translate(translation));\n    return this;\n  }\n}\n\nexport default KGrid;\n","export const colors = {\n  base: \"#F2FBFD\",\n  dark: \"#002C3E\",\n  a1: \"#049DD9\",\n  a2: \"#04B2D9\",\n  highlight: \"#F20544\",\n  highlight_dull: \"#FB93AF\",\n  A: \"#F2528D\",\n  B: \"#1C418C\",\n  C: \"#F2B705\",\n  D: \"#F29F05\",\n  E: \"#F2C2C2\",\n};\n","import React from \"react\";\nimport { colors } from \"./colors\";\n\nexport const GridLines = React.memo(({ lines }) => (\n  <>\n    {lines.map((line, idx) => (\n      <line\n        key={idx}\n        x1={line[0][0]}\n        y1={line[0][1]}\n        x2={line[1][0]}\n        y2={line[1][1]}\n        stroke={\"#eee\"}\n      />\n    ))}\n  </>\n));\n\nexport const GridPoints = React.memo(({ points, activePoint }) => (\n  <>\n    {points.map((pt, idx) => (\n      <circle\n        key={idx}\n        cx={pt.x}\n        cy={pt.y}\n        // r={pt.idx === activeIdx ? 5 : 2}\n        r={3}\n        fill={pt === activePoint ? colors.highlight : \"#ddd\"}\n      />\n    ))}\n  </>\n));\n","import { KPolygon, KPolygonGroup } from \"../kcanvas\";\nimport { colors } from \"../colors\";\n// Triangle with Red center hexagon and green tips\n\nconst createShape = kgrid => {\n  // Octagon\n  const octagon = new KPolygon(\n    [\n      kgrid.createKPoint([1, 0, 1, 0]),\n      kgrid.createKPoint([0, -1, 1, 0]),\n      kgrid.createKPoint([-1, -1, 0, 0]),\n      kgrid.createKPoint([-1, 0, -1, 0]),\n      kgrid.createKPoint([0, 1, -1, 0]),\n      kgrid.createKPoint([1, 1, 0, 0])\n    ],\n    colors.A\n  );\n\n  const triangle = new KPolygon(\n    [\n      kgrid.createKPoint([-2, 2, -4, 0]),\n      kgrid.createKPoint([-2, 0, -2, 0]),\n      kgrid.createKPoint([0, 2, -2, 0])\n    ],\n    colors.B\n  );\n\n  const fillShape = new KPolygon(\n    [\n      kgrid.createKPoint([-1, 1, -2, 0]),\n      kgrid.createKPoint([-2, 0, -2, 0]),\n      kgrid.createKPoint([-2, -1, -1, 0]),\n      kgrid.createKPoint([-1, -1, 0, 3]),\n      kgrid.createKPoint([-1, 0, -1, 0]),\n      kgrid.createKPoint([-1, 0, -1, 5])\n    ],\n    colors.C\n  );\n\n  const polygons = [octagon, triangle, fillShape];\n\n  for (let i = 1; i < 6; i++) {\n    polygons.push(fillShape.copy().rotate((i * 60 * Math.PI) / 180));\n  }\n\n  for (let i = 1; i < 3; i++) {\n    polygons.push(triangle.copy().rotate((i * 120 * Math.PI) / 180));\n  }\n\n  const polygonGroup = new KPolygonGroup(polygons, [\n    kgrid.createKPoint([-2, -4, 2, 0]),\n    kgrid.createKPoint([-2, 2, -4, 0]),\n    kgrid.createKPoint([4, 2, 2, 0])\n  ]);\n\n  return polygonGroup;\n};\n\nexport default createShape;\n","import { KPolygon, KPolygonGroup } from \"../kcanvas\";\nimport { colors } from \"../colors\";\n\nconst shape1 = [\n  [-3, -2, -1, 4],\n  [-3, -1, -2, 0],\n  [-1, 1, -2, 0],\n  [-1, 0, -1, 4],\n  [-1, 0, -1, 2],\n  [-2, -1, -1, 4],\n  [-2, -1, -1, 2]\n];\n\nconst shape2 = [\n  [-2, -2, 0, 0],\n  [-2, -2, 0, 1],\n  [-2, -2, 0, 2],\n  [-3, -2, -1, 4],\n  [-2, -1, -1, 0],\n  [-2, -1, -1, 5],\n  [-1, -1, 0, 2]\n];\n\nconst shape3 = [\n  [-2, -2, 0, 0],\n  [-1, -1, 0, 2],\n  [0, 0, 0, 0]\n];\n\nconst shape4 = [\n  [0, 0, 0, 0],\n  [-1, -1, 0, 2],\n  [-2, -1, -1, 5],\n  [-1, 0, -1, 0],\n  [-1, 0, -1, 4],\n  [0, 0, 0, 2],\n  [0, 0, 0, 3]\n];\n\nconst shape5 = [\n  [-3, -2, -1, 4],\n  [-2, -1, -1, 2],\n  [-2, -1, -1, 4],\n  [-1, 0, -1, 2],\n  [-1, 0, -1, 4],\n  [-1, 0, -1, 0],\n  [-2, -1, -1, 0]\n];\nconst createShape = kgrid => {\n  const p1 = new KPolygon(\n    shape1.map(p => kgrid.createKPoint(p)),\n    colors.A\n  );\n\n  const p2 = new KPolygon(\n    shape2.map(p => kgrid.createKPoint(p)),\n    colors.B\n  );\n\n  const p3 = new KPolygon(\n    shape3.map(p => kgrid.createKPoint(p)),\n    colors.C\n  );\n\n  const p4 = new KPolygon(\n    shape4.map(p => kgrid.createKPoint(p)),\n    colors.D\n  );\n\n  const p5 = new KPolygon(\n    shape5.map(p => kgrid.createKPoint(p)),\n    colors.E\n  );\n\n  return new KPolygonGroup(\n    [p1, p2, p3, p4, p5],\n    [\n      kgrid.createKPoint([-2, -2, 0, 0]),\n      kgrid.createKPoint([-4, -2, -2, 0]),\n      kgrid.createKPoint([0, 2, -2, 0]),\n      kgrid.createKPoint([0, 0, 0, 0])\n    ]\n  );\n};\n\nexport default createShape;\n","import { KPolygon, KPolygonGroup } from \"../kcanvas\";\nimport Shape1 from \"./shape1\";\nimport Shape3 from \"./shape3\";\nimport { colors } from \"../colors\";\n\nconst createShape = kgrid => {\n  const kG1 = Shape1(kgrid);\n\n  const p3 = new KPolygon(\n    [\n      [0, 1, -1, 0],\n      [0, 2, -2, 0],\n      [2, 2, 0, 0],\n      [1, 1, 0, 0]\n    ].map(p => kgrid.createKPoint(p)),\n    Shape3(kgrid)\n  );\n\n  const t1Polygons = [\n    new KPolygon(\n      [\n        kgrid.createKPoint([0, 0, 0, 0]),\n        kgrid.createKPoint([0, 1, -1, 0]),\n        kgrid.createKPoint([1, 1, 0, 0])\n      ],\n      kG1\n    ),\n    p3\n  ];\n\n  // for (let i = 1; i < 6; i++) {\n  //   t1Polygons.push(t1Polygons[0].copy().rotate((i * 60 * Math.PI) / 180));\n  // }\n\n  const pg1 = new KPolygonGroup(\n    t1Polygons,\n    [\n      [0, 0, 0, 0],\n      [2, 2, 0, 0],\n      [0, 2, -2, 0]\n    ].map(p => kgrid.createKPoint(p))\n  );\n\n  return new KPolygon(\n    [\n      [0, 0, 0, 0],\n      [2, 2, 0, 0],\n      [0, 2, -2, 0]\n    ].map(p => kgrid.createKPoint(p)),\n    pg1\n  );\n};\n\nexport default createShape;\n","import { KPolygon, KPolygonGroup } from \"../kcanvas\";\nimport Shape2 from \"./shape2\";\n\nconst createShape = kgrid => {\n  const polygons = [Shape2(kgrid)];\n\n  for (let i = 1; i < 6; i++) {\n    polygons.push(polygons[0].copy().rotate((i * 60 * Math.PI) / 180));\n  }\n\n  return new KPolygon(\n    [\n      [2, 2, 0, 0],\n      [0, 2, -2, 0],\n      [-2, 0, -2, 0],\n      [-2, -2, 0, 0],\n      [0, -2, 2, 0],\n      [2, 0, 2, 0]\n    ].map(p => kgrid.createKPoint(p)),\n    new KPolygonGroup(\n      polygons,\n      [\n        [2, 2, 0, 0],\n        [0, 2, -2, 0],\n        [-2, 0, -2, 0],\n        [-2, -2, 0, 0],\n        [0, -2, 2, 0],\n        [2, 0, 2, 0]\n      ].map(p => kgrid.createKPoint(p))\n    )\n  );\n};\n\nexport default createShape;\n","import React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport KGrid, { KPolygon, KPolygonGroup } from \"./kcanvas\";\nimport { GridLines, GridPoints } from \"./Grid\";\nimport { compose } from \"transformation-matrix\";\nimport { colors } from \"./colors\";\n\nimport Shape2 from \"./shapes/shape2\";\nimport Shape3 from \"./shapes/shape3\";\nimport Shape4 from \"./shapes/shape4\";\n\n// See Page 58 in Notes\n\n// const kgrid = new KGrid();\n\nconst Canvas = ({ mouseOver }) => {\n  const cRef = useRef(null);\n\n  const [canvasDims] = useState({ width: 800, height: 500 });\n  const [activePoint, setActivePoint] = useState(null);\n  const [gridPoints, setGridPoints] = useState([]);\n  const [gridLines, setGridLines] = useState([]);\n  const [kGrid] = useState(new KGrid());\n  const [polygons, setPolygons] = useState([]);\n  const [clickedPoints, setClickedPoints] = useState([]);\n\n  const mouseMove = ({ x, y }) => {\n    const { x: rX, y: rY } = cRef.current.getBoundingClientRect();\n    const pt = kGrid.qTree.find(\n      x - rX - canvasDims.width / 2,\n      y - rY - canvasDims.height / 2\n    );\n    if (pt && pt !== activePoint) {\n      setActivePoint(pt);\n      mouseOver(pt);\n    }\n  };\n\n  const mouseClick = useCallback(\n    ({ x, y }) => {\n      const { x: rX, y: rY } = cRef.current.getBoundingClientRect();\n      const pt = kGrid.qTree.find(\n        x - rX - canvasDims.width / 2,\n        y - rY - canvasDims.height / 2\n      );\n\n      setClickedPoints([...clickedPoints, pt]);\n    },\n    [clickedPoints]\n  );\n\n  const keyPress = ({ key }) => {\n    if (key === \"c\") {\n      setClickedPoints([]);\n    }\n  };\n\n  useEffect(() => {\n    const width = cRef.current.clientWidth;\n    const height = cRef.current.clientHeight;\n\n    console.log(\"KGRID init\");\n    kGrid.intitialize(width, height);\n\n    const svgNode = cRef.current;\n\n    const pg1 = new KPolygon(\n      [\n        [-5, -6, 1, 4],\n        [-5, -6, 1, 2],\n        [-7, -5, -2, 4],\n        [-6, -4, -2, 2],\n        [-4, -3, -1, 4],\n        [-3, -3, 0, 2]\n      ].map(p => kGrid.createKPoint(p)),\n      colors.E\n    );\n\n    const pG = new KPolygonGroup(\n      [pg1],\n      [\n        [-5, -6, 1, 0],\n        [-7, -4, -3, 0],\n        [-3, -2, -1, 0]\n      ].map(p => kGrid.createKPoint(p))\n    );\n\n    const pgs = [\n      new KPolygon(\n        [\n          [1, 1, 0, 0],\n          [2, 3, -1, 0],\n          [3, 2, 1, 0]\n        ].map(p => kGrid.createKPoint(p)),\n        pG\n      )\n    ];\n\n    for (let i = 1; i < 6; i++) {\n      pgs.push(pgs[0].copy().rotate((i * 60 * Math.PI) / 180));\n    }\n\n    setPolygons([\n      Shape4(kGrid),\n      Shape4(kGrid)\n        .copy()\n        .translate({ dAnt: -4, dBat: -2, dCat: -2 }),\n      Shape4(kGrid)\n        .copy()\n        .translate({ dAnt: -2, dBat: -4, dCat: 2 }),\n      Shape4(kGrid)\n        .copy()\n        .translate({ dAnt: 4, dBat: 2, dCat: 2 }),\n      Shape4(kGrid)\n        .copy()\n        .translate({ dAnt: 2, dBat: 4, dCat: -2 }),\n      Shape4(kGrid)\n        .copy()\n        .translate({ dAnt: 2, dBat: -2, dCat: 4 }),\n      ...pgs\n      // Shape4(kGrid)\n      //   .copy()\n      //   .translate({ dAnt: -2, dBat: 2, dCat: -4 })\n    ]);\n\n    const { pts, lines } = kGrid.getGrid();\n\n    setGridPoints(pts);\n    setGridLines(lines);\n\n    svgNode.addEventListener(\"mousemove\", mouseMove);\n    window.addEventListener(\"keypress\", keyPress);\n\n    return () => {\n      svgNode.removeEventListener(\"mousemove\", mouseMove);\n      window.removeEventListener(\"keypress\", keyPress);\n    };\n  }, []);\n\n  useEffect(() => {\n    const svgNode = cRef.current;\n    svgNode.addEventListener(\"click\", mouseClick);\n\n    return () => {\n      svgNode.removeEventListener(\"click\", mouseClick);\n    };\n  }, [mouseClick]);\n\n  return (\n    <div>\n      {JSON.stringify(clickedPoints.map(d => [d.ant, d.bat, d.cat, d.dog]))}\n      <svg ref={cRef} width={canvasDims.width} height={canvasDims.height}>\n        <g\n          transform={`translate(${canvasDims.width / 2}, ${canvasDims.height /\n            2})`}\n        >\n          {/* <GridLines lines={gridLines} />\n          <GridPoints points={gridPoints} activePoint={activePoint} /> */}\n          {polygons.map((kPolygon, idx) => (\n            <Polygon key={idx} kPolygon={kPolygon} />\n          ))}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nconst PolygonGroup = React.memo(({ kPolygonGroup, drawHull = false }) => {\n  return (\n    <g>\n      {kPolygonGroup.kPolygons.map((kPolygon, idx) => (\n        <Polygon key={idx} kPolygon={kPolygon} tMat={kPolygonGroup.tMat} />\n      ))}\n    </g>\n  );\n});\n\nconst Polygon = React.memo(({ kPolygon, tMat }) => {\n  if (kPolygon.color instanceof KPolygonGroup) {\n    let tMat2;\n    if (tMat) {\n      tMat2 = compose([tMat, kPolygon.tMat()]);\n    } else {\n      tMat2 = kPolygon.tMat();\n    }\n\n    return (\n      <>\n        {kPolygon.color.kPolygons.map((kPolygon, idx) => (\n          <Polygon key={idx} kPolygon={kPolygon} tMat={tMat2} />\n        ))}\n      </>\n    );\n  } else {\n    return (\n      <path\n        d={kPolygon.pathString(tMat)}\n        fill={kPolygon.color}\n        fillOpacity={1}\n        stroke={\"black\"}\n        strokeWidth={3}\n        strokeLinejoin=\"round\"\n      />\n    );\n  }\n});\n\nexport default Canvas;\n","import React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport KGrid, { KPolygon, KPolygonGroup } from \"../../kcanvas\";\nimport { GridLines, GridPoints } from \"../../Grid\";\nimport { compose } from \"transformation-matrix\";\nimport * as d3 from \"d3\"; // See Page 58 in Notes\nimport { Menu, Dropdown } from \"antd\";\n\nconst poly = kgrid =>\n  new KPolygon(\n    [\n      [3, 4, -1, 0],\n      [2, 4, -2, 0],\n      [2, 5, -3, 0],\n      [3, 6, -3, 0],\n      [4, 6, -2, 0],\n      [4, 5, -1, 0]\n    ].map(p => kgrid.createKPoint(p)),\n    \"red\"\n  );\n\nconst poly2 = kgrid =>\n  new KPolygon(\n    [\n      [0, -1, 1, 0],\n      [-1, -1, 0, 0],\n      [-1, 0, -1, 0],\n      [0, 1, -1, 0],\n      [1, 1, 0, 0],\n      [1, 0, 1, 0]\n    ].map(p => kgrid.createKPoint(p)),\n    \"red\"\n  );\n\nconst poly3 = kgrid =>\n  new KPolygon(\n    [\n      [1, 1, 0, 0],\n      [1, 2, -1, 0],\n      [0, 1, -1, 0]\n    ].map(p => kgrid.createKPoint(p)),\n    \"green\"\n  );\n\nconst Canvas = ({ className, onClick, drawingPoly }) => {\n  const cRef = useRef(null);\n\n  const [canvasDims, setCanvasDims] = useState({ width: 800, height: 500 });\n  const [activePoint, setActivePoint] = useState(null);\n  const [gridPoints, setGridPoints] = useState([]);\n  const [activePolygon, setActivePolygon] = useState(null);\n  const [gridLines, setGridLines] = useState([]);\n  const [kGrid] = useState(new KGrid());\n  const [polygons, setPolygons] = useState([]);\n  const [clickedPoints, setClickedPoints] = useState([]);\n  const [canvasState, setCanvasState] = useState(null);\n\n  const mouseMove = ({ clientX: x, clientY: y }) => {\n    if (activePolygon >= 0 && canvasState === \"MOVE\") {\n      const { x: rX, y: rY } = cRef.current.getBoundingClientRect();\n      const pt = kGrid.qTree.find(\n        x - rX - canvasDims.width / 2,\n        y - rY - canvasDims.height / 2\n      );\n\n      console.log(pt, polygons[activePolygon]);\n      if (polygons[activePolygon]) {\n        const nP = polygons[activePolygon].copy().position({\n          ant: pt.ant,\n          bat: pt.bat,\n          cat: pt.cat\n        });\n\n        console.log(\n          activePolygon,\n          polygons.slice(0, activePolygon),\n          polygons.slice(activePolygon + 1, polygons.length)\n        );\n\n        setPolygons([\n          ...polygons.slice(0, activePolygon),\n          nP,\n          ...polygons.slice(activePolygon + 1, polygons.length)\n        ]);\n      }\n    }\n  };\n\n  const mouseClick = ({ clientX: x, clientY: y }) => {\n    const { x: rX, y: rY } = cRef.current.getBoundingClientRect();\n    const pt = kGrid.qTree.find(\n      x - rX - canvasDims.width / 2,\n      y - rY - canvasDims.height / 2\n    );\n\n    onClick(pt);\n\n    // if (pt === clickedPoints[0]) {\n    //   setPolygons([\n    //     ...polygons,\n    //     new KPolygon(\n    //       clickedPoints.map(p => kGrid.createKPoint(p)),\n    //       \"blue\"\n    //     )\n    //   ]);\n    //   setClickedPoints([]);\n    // } else {\n    //   setClickedPoints([...clickedPoints, pt]);\n    // }\n  };\n\n  const duplicate = () => {\n    console.log(\"DUPL\", activePolygon);\n  };\n\n  useEffect(() => {\n    const width = cRef.current.parentNode.clientWidth;\n    const height = cRef.current.clientHeight;\n\n    setCanvasDims({ width, height });\n  }, [cRef]);\n\n  useEffect(() => {\n    const { width, height } = canvasDims;\n\n    kGrid.intitialize(width, height);\n\n    const { pts, lines } = kGrid.getGrid();\n\n    setPolygons([poly(kGrid), poly(kGrid).center()]);\n\n    setGridPoints(pts);\n    setGridLines(lines);\n  }, []);\n\n  var path = d3.path();\n\n  const points = clickedPoints.map(d => [d.x, d.y]);\n\n  if (points.length) {\n    path.moveTo(points[0][0], points[0][1]);\n    points.forEach(([x, y]) => path.lineTo(x, y));\n    path.closePath();\n  }\n\n  const pString = path.toString();\n\n  const setActive = idx => {\n    console.log(\"ACTIVE\", idx);\n    setActivePolygon(idx);\n  };\n\n  console.log(\"DP\", drawingPoly);\n  if (drawingPoly) {\n    console.log(drawingPoly.draw());\n  }\n\n  return (\n    <div className={className}>\n      <svg\n        ref={cRef}\n        width={canvasDims.width}\n        height={canvasDims.height}\n        onClick={mouseClick}\n        onMouseMove={mouseMove}\n      >\n        <g\n          transform={`translate(${canvasDims.width / 2}, ${canvasDims.height /\n            2})`}\n        >\n          <GridLines lines={gridLines} />\n          <GridPoints points={gridPoints} activePoint={activePoint} />\n          {polygons.map((kPolygon, idx) => (\n            <Polygon\n              key={idx}\n              kPolygon={kPolygon}\n              setActive={() => setActive(idx)}\n              setState={setCanvasState}\n            />\n          ))}\n          {/* {drawingPoly && (\n            <path\n              d={drawingPoly.draw()}\n              stroke=\"red\"\n              fill=\"red\"\n              opacity=\"0.3\"\n            />\n          )} */}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nconst Polygon = React.memo(\n  ({ kPolygon, tMat, setActive: setActive2, setState }) => {\n    const [hover, setHover] = useState(false);\n    const [active, setActive] = useState(false);\n    const onMouseOver = () => {\n      setHover(true);\n    };\n\n    const onMouseLeave = () => {\n      setHover(false);\n    };\n\n    const onMouseClick = event => {\n      event.stopPropagation();\n      setActive(!active);\n\n      setActive2();\n    };\n\n    const menu = (\n      <Menu>\n        <Menu.Item key=\"1\" onClick={() => setState(\"MOVE\")}>\n          move\n        </Menu.Item>\n        <Menu.Item key=\"2\">duplicate</Menu.Item>\n      </Menu>\n    );\n\n    if (kPolygon.color instanceof KPolygonGroup) {\n      let tMat2;\n      if (tMat) {\n        tMat2 = compose([tMat, kPolygon.tMat()]);\n      } else {\n        tMat2 = kPolygon.tMat();\n      }\n\n      return (\n        <>\n          {kPolygon.color.kPolygons.map((kPolygon, idx) => (\n            <Polygon key={idx} kPolygon={kPolygon} tMat={tMat2} />\n          ))}\n        </>\n      );\n    } else {\n      return (\n        <Dropdown overlay={menu} trigger={[\"contextMenu\"]}>\n          <path\n            d={kPolygon.pathString(tMat)}\n            fill={active ? \"red\" : hover ? \"orange\" : kPolygon.color}\n            fillOpacity={0.4}\n            stroke={\"black\"}\n            strokeWidth={3}\n            strokeLinejoin=\"round\"\n            onMouseOver={onMouseOver}\n            onMouseLeave={onMouseLeave}\n            onClick={onMouseClick}\n          />\n        </Dropdown>\n      );\n    }\n  }\n);\n\nexport default Canvas;\n","import React, { useState } from \"react\";\nimport * as d3 from \"d3\";\n\nimport Canvas from \"./canvas\";\nimport Sidebar from \"./sidebar\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusSquare } from \"@fortawesome/free-solid-svg-icons\";\n\nconst UnFinishedPolygon = function() {\n  this.pts = [];\n\n  this.addPoint = function(pt) {\n    this.pts.push(pt);\n\n    console.log(this.pts);\n  };\n\n  this.draw = function() {\n    const points = this.pts.map(d => [d.x, d.y]);\n\n    var path = d3.path();\n\n    if (points.length) {\n      path.moveTo(points[0][0], points[0][1]);\n      points.forEach(([x, y]) => path.lineTo(x, y));\n      path.closePath();\n    }\n\n    return path.toString();\n  };\n\n  return this;\n};\n\n// console.log(\"DAVE\", UnFinishedPolygon, new UnFinishedPolygon());\n\nconst Page1 = () => {\n  const [appState, setAppState] = useState(null);\n\n  const [drawingPoly, setDrawingPoly] = useState(null);\n\n  const createNew = () => {\n    console.log(\"create new\");\n    setAppState(\"CREATE\");\n    setDrawingPoly(new UnFinishedPolygon());\n  };\n\n  const onClick = pt => {\n    drawingPoly.addPoint(pt);\n    // if (pt === clickedPoints[0]) {\n    //   setPolygons([\n    //     ...polygons,\n    //     new KPolygon(\n    //       clickedPoints.map(p => kGrid.createKPoint(p)),\n    //       \"blue\"\n    //     )\n    //   ]);\n    //   setClickedPoints([]);\n    // } else {\n    //   setClickedPoints([...clickedPoints, pt]);\n    // }\n  };\n  return (\n    <div className=\"flex mx-auto w-full\">\n      <Canvas\n        className=\"flex-grow\"\n        onClick={onClick}\n        drawingPoly={drawingPoly}\n      />\n      <div className=\"flex flex-column border rounded p-4\">\n        <FontAwesomeIcon\n          className=\"hover:text-gray-600 active:text-gray-700\"\n          onClick={createNew}\n          icon={faPlusSquare}\n          size=\"4x\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Page1;\n","import React from \"react\";\n\nexport const Boundary = ({ kGrid }) => {\n  const width = kGrid.cWidth;\n  const height = kGrid.cHeight;\n\n  return (\n    <rect\n      className=\"text-gray-300 stroke-current stroke-2\"\n      x={`${-width / 2}`}\n      y={`${-height / 2}`}\n      width={width}\n      height={height}\n      fill=\"none\"\n    />\n  );\n};\n","import React, { useRef, useState } from \"react\";\nimport { KGrid } from \"../../utils\";\nimport { Boundary } from \"./Boundary\";\n\nimport * as R from \"ramda\";\n\nexport const Canvas = ({\n  children,\n  columns,\n  rows,\n  onMouseMove,\n  onMouseClick\n}) => {\n  const [dims, setDims] = useState({ width: 0, height: 0 });\n  const [kGrid, setKGrid] = useState();\n  // const [activePt, setActivePt] = useState({ ant: 0, bat: 0, cat: 0 });\n  // const [clickedPoints, setClickedPoints] = useState([]);\n  // const [polygons, setPolygons] = useState();\n  // const [action, setAction] = useState({ action: null, data: null });\n\n  const targetRef = useRef();\n  const padding = 20;\n\n  React.useEffect(() => {\n    console.log(\"KGrid useeffect\");\n    const kGrid = new KGrid(columns, rows);\n    setKGrid(kGrid);\n\n    console.log(\"kgrid\", kGrid, targetRef);\n\n    const clientWidth = targetRef.current.parentElement.clientWidth;\n    const { width, height } = kGrid.setWidth(clientWidth - 2 * padding);\n    setDims({ width, height });\n  }, [columns, rows]);\n\n  // React.useEffect(() => {\n  //   console.log(\"target Use effect\", kGrid);\n  //   const clientWidth = targetRef.current.parentElement.clientWidth;\n\n  // const { width, height } = kGrid.setWidth(clientWidth - 2 * padding);\n  // setDims({ width, height });\n  // setPolygons(\n  //   [octagon, octagon2].map(({ pts, color }, id) => ({\n  //     id,\n  //     pts: pts.map(([ant, bat, cat, dog]) =>\n  //       kGrid.convertPt({ ant, bat, cat, dog })\n  //     ),\n  //     color\n  //   }))\n  // );\n  // }, [targetRef]);\n\n  const { width, height } = dims;\n\n  // const mouseClick = ({ clientX: x, clientY: y }) => {\n  //   if (action.action === \"MOVE\") {\n  //     setAction({ action: null, data: null });\n  //   } else if (action.action === \"NEW\") {\n  //     const { x: rX, y: rY } = targetRef.current.getBoundingClientRect();\n\n  //     const mX = x - rX - dims.width / 2 - padding;\n  //     const mY = y - rY - dims.height / 2 - padding;\n\n  //     const pt = kGrid.qTree.find(mX, mY);\n\n  //     if (pt === clickedPoints[0]) {\n  //       setPolygons(polygons => [\n  //         ...polygons,\n  //         {\n  //           pts: clickedPoints.map(pt => [pt.ant, pt.bat, pt.cat, pt.dog]),\n  //           color: \"green\"\n  //         }\n  //       ]);\n  //       setClickedPoints([]);\n  //     } else {\n  //       setClickedPoints(pts => [...pts, pt]);\n  //     }\n  //   }\n  // };\n\n  const mouseMove = ({ clientX: x, clientY: y }) => {\n    // const { id } = action.data;\n    const { x: rX, y: rY } = targetRef.current.getBoundingClientRect();\n\n    const mX = x - rX - dims.width / 2 - padding;\n    const mY = y - rY - dims.height / 2 - padding;\n\n    const cursorPt = kGrid.qTree.find(mX, mY);\n\n    return onMouseMove(cursorPt);\n  };\n\n  const mouseClick = ({ clientX: x, clientY: y }) => {\n    const { x: rX, y: rY } = targetRef.current.getBoundingClientRect();\n\n    const mX = x - rX - dims.width / 2 - padding;\n    const mY = y - rY - dims.height / 2 - padding;\n\n    const cursorPt = kGrid.qTree.find(mX, mY);\n\n    return onMouseClick(cursorPt);\n    // onMouseClick\n  };\n\n  //   if (action.action === \"MOVE\") {\n  //     const { id } = action.data;\n  //     const { x: rX, y: rY } = targetRef.current.getBoundingClientRect();\n\n  //     const mX = x - rX - dims.width / 2 - padding;\n  //     const mY = y - rY - dims.height / 2 - padding;\n\n  //     const cursorPt = kGrid.qTree.find(mX, mY);\n\n  //     const polygon = polygons[0];\n\n  //     const pt0 = polygon.pts[0];\n  //     const dX = cursorPt.x - pt0[0];\n  //     const dY = cursorPt.y - pt0[1];\n\n  //     const newPts = polygon.pts.map(pt => [pt[0] + dX, pt[1] + dY]);\n\n  //     const isId = R.propEq(\"id\");\n\n  //     const setPoints = R.evolve({ pts: () => newPts });\n\n  //     const toggleID = (id, data) =>\n  //       R.curry(R.map(R.when(isId(id), setPoints)))(data);\n\n  //     setPolygons(toggleID(id, polygons));\n  //   }\n  // };\n\n  // const setState = action => {\n  //   // console.log(id, action);\n  //   setAction(action);\n  // };\n\n  // const newChildren = React.Children.toArray(children).map(child => {\n  //   console.log(child);\n  //   return React.cloneElement(child, { kGrid });\n  // });\n\n  // );\n  return (\n    <div className=\"w-full\">\n      <svg\n        ref={targetRef}\n        width={width + 2 * padding}\n        height={height + 2 * padding}\n        onMouseMove={mouseMove}\n        onClick={mouseClick}\n      >\n        {width && (\n          <g\n            transform={`translate(${padding + width / 2}, ${padding +\n              height / 2})`}\n          >\n            {children({ kGrid })}\n            {/* {newChildren} */}\n\n            {/* <Polygon\n              pts={clickedPoints.map(pt => [pt.ant, pt.bat, pt.cat, pt.dog])}\n              color={\"green\"}\n              kGrid={kGrid}\n              closed={false}\n              anchor={{ ant: 0, bat: 0, cat: 0 }}\n            /> */}\n          </g>\n        )}\n      </svg>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusSquare, faSave } from \"@fortawesome/free-solid-svg-icons\";\nimport { Tooltip } from \"antd\";\n\nexport const Sidebar = ({ setAction, onSave }: any) => {\n  return (\n    <div className=\"flex flex-column border rounded p-4\">\n      <Tooltip placement=\"top\" title={\"Create Shape\"}>\n        <FontAwesomeIcon\n          className=\"hover:text-gray-700 text-gray-800 active:text-gray-600\"\n          icon={faPlusSquare}\n          size=\"4x\"\n          onClick={() => setAction({ action: \"NEW\" })}\n        />\n      </Tooltip>\n      <Tooltip placement=\"top\" title={\"Save\"}>\n        <FontAwesomeIcon\n          className=\"hover:text-gray-700 text-gray-800 active:text-gray-600\"\n          icon={faSave}\n          size=\"4x\"\n          onClick={() => onSave()}\n        />\n      </Tooltip>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { isOdd } from \"../../utils\";\n\ninterface GridPointsProps {\n  kGrid: any;\n}\n\nexport const GridPoints = React.memo<GridPointsProps>(({ kGrid }) => {\n  // console.log(\"GridPoints\", kGrid, activePt);\n  const nPts = React.useMemo(() => kGrid.generateGrid(), [kGrid]);\n\n  // const newI = isOdd(activePt.cat)\n  //   ? activePt.ant - (activePt.cat + 1) / 2\n  //   : activePt.ant + activePt.cat / 2;\n\n  // console.log(\n  //   [activePt.ant, activePt.bat, activePt.cat, activePt.dog],\n  //   [activePt.i, activePt.j],\n  //   [newI, activePt.cat]\n  // );\n  return (\n    <>\n      {nPts.map(({ idx, x, y }: any) => {\n        return (\n          <circle\n            key={idx}\n            cx={x}\n            cy={y}\n            r={2}\n            className=\"text-gray-400 fill-current\"\n          />\n        );\n      })}\n      {/* <circle cx={activePt.x} cy={activePt.y} r=\"3\" fill=\"black\" /> */}\n    </>\n  );\n});\n","import React from \"react\";\nimport { Menu, Dropdown } from \"antd\";\nimport { genPathString } from \"../../utils\";\nimport { colors } from \"../../colors\";\nimport * as R from \"ramda\";\ninterface PolygonProps {\n  id: any;\n  pts: any;\n  color: any;\n  closed: any;\n  setState: any;\n  onDelete?: any;\n  setColor?: any;\n  onDuplicate?: any;\n}\n\nexport const Polygon = React.memo<PolygonProps>(\n  ({ id, pts, color, closed, setState, onDelete, setColor, onDuplicate }) => {\n    const dPath = genPathString(pts, closed);\n    const menu2 = (\n      <Menu>\n        <Menu.Item\n          key=\"1\"\n          onClick={() =>\n            setState({\n              action: \"MOVE\",\n              data: { id },\n            })\n          }\n        >\n          move\n        </Menu.Item>\n        <Menu.Item key=\"2\">duplicate</Menu.Item>\n      </Menu>\n    );\n\n    const menu = (\n      <Menu>\n        <Menu.Item\n          key=\"1\"\n          onClick={() =>\n            setState({\n              action: \"MOVE\",\n              data: { id },\n            })\n          }\n        >\n          move\n        </Menu.Item>\n        <Menu.Item key=\"2\" onClick={() => onDuplicate(id)}>\n          duplicate\n        </Menu.Item>\n        <Menu.Item key=\"3\" onClick={() => onDelete(id)}>\n          delete\n        </Menu.Item>\n        <Menu.SubMenu title=\"color\">\n          <div className=\"flex flex-row flex-wrap\" style={{ width: 100 }}>\n            {R.values(colors).map((v) => (\n              <div\n                key={v}\n                style={{ backgroundColor: v, width: 20, height: 20 }}\n                onClick={() => setColor(id, v)}\n              />\n            ))}\n          </div>\n        </Menu.SubMenu>\n      </Menu>\n    );\n\n    return (\n      <>\n        <Dropdown overlay={menu} trigger={[\"contextMenu\"]}>\n          <path\n            d={dPath}\n            stroke=\"black\"\n            fill={color}\n            fillOpacity={1}\n            strokeWidth={3}\n            strokeLinejoin=\"round\"\n          />\n        </Dropdown>\n        {closed ||\n          pts.map((pt: any, idx: number) => (\n            <circle key={idx} cx={pt[0]} cy={pt[1]} r={3} />\n          ))}\n      </>\n    );\n  }\n);\n","import React, { useState } from \"react\";\n\nimport { Canvas } from \"./canvas\";\nimport { Sidebar } from \"./sidebar\";\nimport { GridPoints } from \"./GridPoints\";\nimport { Polygon } from \"./Polygon\";\nimport { KGrid } from \"../../utils\";\nimport { Boundary } from \"./Boundary\";\nimport * as R from \"ramda\";\n\nconst octagon = {\n  id: \"0\",\n  kPts: [\n    [1, 0, 1, 0],\n    [0, -1, 1, 0],\n    [-1, -1, 0, 0],\n    [-1, 0, -1, 0],\n    [0, 1, -1, 0],\n    [1, 1, 0, 0],\n  ].map((d) => ({\n    ant: d[0],\n    bat: d[1],\n    cat: d[2],\n    dog: d[3],\n  })),\n  color: \"red\",\n};\n\nconst octagon2 = {\n  id: \"1\",\n  kPts: [\n    [2, 4, -2, 0],\n    [1, 3, -2, 0],\n    [0, 3, -3, 0],\n    [0, 4, -4, 0],\n    [1, 5, -4, 0],\n    [2, 5, -3, 0],\n  ].map((d) => ({\n    ant: d[0],\n    bat: d[1],\n    cat: d[2],\n    dog: d[3],\n  })),\n  color: \"blue\",\n};\n\n// function addPoint(pts, newPt) {}\n\n// function deletePoint(pts, pt) {}\n\n// function createPolygon() {}\n\n// function deletePolygon() {}\n\ninterface KPoint {\n  ant: number;\n  bat: number;\n  cat: number;\n  dog: number;\n}\n\ninterface KPolygon {\n  id: string;\n  kPts: KPoint[];\n  color: string;\n}\n\nfunction lensMatching(pred: any) {\n  return R.lens(R.find(pred), (newVal: any, array: any[]) => {\n    const index = R.findIndex(pred, array);\n    return R.update(index, newVal, array);\n  });\n}\n\nconst lensById = R.compose(lensMatching, R.propEq(\"id\"));\n\nconst movePolygon = R.curry((pt: KPoint, polygon_: KPolygon) => {\n  const polygon = R.clone(polygon_);\n  const refPt = polygon.kPts[0];\n  const dAnt = pt.ant - refPt.ant;\n  const dBat = pt.bat - refPt.bat;\n  const dCat = pt.cat - refPt.cat;\n\n  polygon.kPts = polygon.kPts.map((pt: KPoint) => ({\n    ...pt,\n    ant: pt.ant + dAnt,\n    bat: pt.bat + dBat,\n    cat: pt.cat + dCat,\n  }));\n\n  return polygon;\n});\n\nexport const Page2 = () => {\n  const [polygons, setPolygons] = useState(() => {\n    var p = localStorage.getItem(\"myData\");\n\n    if (p) {\n      return JSON.parse(p) as KPolygon[];\n    }\n    return [octagon, octagon2] as KPolygon[];\n  });\n  const [action, setAction] = useState({ action: null, data: null });\n  const [clickedPoints, setClickedPoints] = useState([]);\n\n  const onMouseMove = (pt: any) => {\n    if (action.action === \"MOVE\") {\n      const { id }: any = action.data;\n      setPolygons(R.over(lensById(id), movePolygon(pt), polygons));\n    }\n  };\n\n  const onMouseClick = (pt: any) => {\n    if (action.action === \"MOVE\") {\n      setAction({ action: null, data: null });\n    } else if (action.action === \"NEW\") {\n      if (pt === clickedPoints[0]) {\n        setPolygons([\n          ...polygons,\n          {\n            id: Math.random().toString(36).slice(2),\n            kPts: clickedPoints,\n            color: \"green\",\n          },\n        ] as any);\n        setClickedPoints([]);\n        setAction({ action: null, data: null });\n      } else {\n        setClickedPoints((pts: any) => [...pts, pt] as any);\n      }\n    }\n  };\n\n  const onDelete = (id: string) => {\n    setPolygons(R.filter((d) => d.id !== id, polygons));\n  };\n\n  const onDuplicate = (id: string) => {\n    const polygon = R.clone(R.find(R.propEq(\"id\", id), polygons)) as KPolygon;\n    const newId = Math.random().toString(36).slice(2);\n    polygon.id = newId;\n    setPolygons(R.append(polygon, polygons));\n    setAction({ action: \"MOVE\", data: { id: newId } } as any);\n  };\n\n  console.log(\"dave\");\n\n  const setColor = (id: string, color: string) => {\n    setPolygons(\n      R.over(\n        lensById(id),\n        (polygon_: KPolygon) => {\n          const polygon = R.clone(polygon_);\n          polygon.color = color;\n          return polygon;\n        },\n        polygons\n      )\n    );\n  };\n\n  const onSave = () => {\n    localStorage.setItem(\"myData\", JSON.stringify(polygons));\n  };\n\n  return (\n    <div className=\"flex mx-auto w-full\">\n      <div className=\"w-10/12 flex items-center justify-center\">\n        <Canvas\n          columns={15}\n          rows={10}\n          onMouseMove={onMouseMove}\n          onMouseClick={onMouseClick}\n        >\n          {({ kGrid }: any) => (\n            <>\n              <GridPoints kGrid={kGrid} />\n              <Boundary kGrid={kGrid} />\n              {polygons.map((polygon) => (\n                <Polygon\n                  key={polygon.id}\n                  id={polygon.id}\n                  pts={polygon.kPts.map(({ ant, bat, cat, dog }) =>\n                    kGrid.convertPt({ ant, bat, cat, dog })\n                  )}\n                  color={polygon.color}\n                  setState={setAction}\n                  closed={true}\n                  onDelete={onDelete}\n                  setColor={setColor}\n                  onDuplicate={onDuplicate}\n                />\n              ))}\n              <Polygon\n                id=\"new\"\n                pts={clickedPoints.map(({ ant, bat, cat, dog }) =>\n                  kGrid.convertPt({ ant, bat, cat, dog })\n                )}\n                color={\"green\"}\n                closed={false}\n                setState={() => console.log(\"dave\")}\n              />\n            </>\n          )}\n        </Canvas>\n      </div>\n      <div className=\"w-2/12 flex items-center justify-center\">\n        <Sidebar setAction={setAction} onSave={onSave} />\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Canvas from \"./canvas\";\nimport { Modal, Button } from \"antd\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithubSquare } from \"@fortawesome/free-brands-svg-icons\";\n\nimport Page1 from \"./routes/page1\";\nimport { Page2 } from \"./routes/page2\";\n\nconst Header = () => {\n  const [modalVisible, setModalVisible] = useState(false);\n  return (\n    <>\n      <Modal\n        title=\"Kmap\"\n        visible={modalVisible}\n        footer={null}\n        closable={false}\n        // onOk={this.handleOk}\n        onCancel={() => setModalVisible(false)}\n      ></Modal>\n      <div className=\"text-xl p-3 w-10/12 mx-auto flex justify-between\">\n        <div>\n          <a href=\"http://dvreed.com\">dvreed.com</a>\n        </div>\n        <div className=\"flex\">\n          <div\n            className=\"hover:text-orange-400 cursor-pointer\"\n            onClick={() => setModalVisible(true)}\n          >\n            About\n          </div>\n          <div className=\"hover:text-orange-400 cursor-pointer\">\n            <a\n              className=\"hover:text-orange-400 cursor-pointer pl-3\"\n              href=\"https://github.com/dvreed77/kmap\"\n            >\n              <FontAwesomeIcon\n                className=\"hover:text-orange-400 cursor-pointer\"\n                color=\"black\"\n                icon={faGithubSquare}\n                size=\"lg\"\n              />\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nfunction App() {\n  const [activePt, setActivePt] = useState(null);\n  const mouseOver = pt => {\n    setActivePt(pt);\n  };\n\n  return (\n    <Router>\n      <Header />\n      <div className=\"w-10/12 mx-auto flex flex-row\">\n        <Switch>\n          <Route path=\"/page1\" component={Page1} />\n          <Route path=\"/page2\" component={Page2} />\n          <Route path=\"/\">\n            <Canvas mouseOver={mouseOver} />\n            {activePt && (\n              <ul>\n                <li>ANT: {activePt.ant}</li>\n                <li>BAT: {activePt.bat}</li>\n                <li>CAT: {activePt.cat}</li>\n                <li>DOG: {activePt.dog}</li>\n              </ul>\n            )}\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}