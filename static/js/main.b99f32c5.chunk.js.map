{"version":3,"sources":["utils.js","kcanvas.js","colors.js","Grid.js","shapes/shape1.js","shapes/shape3.js","shapes/shape2.js","shapes/shape4.js","canvas.js","App.js","index.js"],"names":["GridGenerator","SQRT_3","Math","sqrt","isOdd","d","nCols","nRows","cStart","cEnd","rStart","rEnd","idx","i","j","KGrid","this","kPoints","lines","qTree","d3","x","y","width","height","setup","F","H","G","HEX_W","N_HEX_COLS","ceil","N_HEX_ROWS","genGrid","kPoint","Array","isArray","length","zipObject","find","x0","ant","bat","cat","dog","y0","dx","dy","angle","PI","cos","sin","xD","yD","push","KPoint","angle1","angle2","dx1","dy1","dx2","dy2","addAll","pts","kgrid","rotate","rotationAngle","r","pow","newAngle","atan2","newX","newY","translate","dAnt","dBat","dCat","dDog","createKPoint","KPolygon","color","hull1","hull","hull2","triangle1","slice","map","triangle2","fromTriangles","translation","tMat","path","points","newPoints","applyToPoints","moveTo","forEach","lineTo","closePath","toString","KPolygonGroup","kPolygons","kPolygon","kP","copy","flatMap","polygonHull","console","log","pt","colors","GridLines","React","memo","line","key","x1","y1","x2","y2","stroke","GridPoints","activePoint","cx","cy","fill","createShape","octagon","triangle","fillShape","polygons","shape1","shape2","shape3","shape4","shape5","p1","p","p2","p3","p4","p5","kG1","Shape1","Shape3","t1Polygons","pg1","Shape2","Polygon","kPolygonGroup","drawHull","tMat2","compose","pathString","fillOpacity","strokeWidth","strokeLinejoin","Canvas","mouseOver","cRef","useRef","useState","canvasDims","setActivePoint","gridPoints","setGridPoints","gridLines","setGridLines","kGrid","setPolygons","clickedPoints","setClickedPoints","mouseMove","current","getBoundingClientRect","rX","rY","mouseClick","useCallback","keyPress","useEffect","clientWidth","clientHeight","intitialize","svgNode","Shape4","getGrid","addEventListener","window","removeEventListener","JSON","stringify","ref","transform","App","activePt","setActivePt","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b99f32c5.chunk.js","sourcesContent":["export const SQRT_3 = Math.sqrt(3);\n\nexport const isOdd = d => !!(d % 2);\n\nexport function* GridGenerator(nCols, nRows) {\n  let cStart, cEnd;\n  if (isOdd(nCols)) {\n    cStart = -(nCols - 1) / 2 - 1;\n    cEnd = (nCols - 1) / 2 + 1;\n  } else {\n    cStart = -nCols / 2 - 1;\n    cEnd = nCols / 2 + 1;\n  }\n\n  let rStart, rEnd;\n  if (isOdd(nRows)) {\n    rStart = -(nRows - 1) / 2;\n    rEnd = (nRows - 1) / 2 + 1;\n  } else {\n    rStart = -nRows / 2;\n    rEnd = nRows / 2 + 1;\n  }\n\n  let idx = 0;\n  for (let i = cStart; i < cEnd; i++) {\n    for (let j = rStart; j < rEnd; j++) {\n      yield [idx, i, j];\n      idx++;\n    }\n  }\n}\n","import { SQRT_3, GridGenerator, isOdd } from \"./utils\";\nimport { fromTriangles, applyToPoints } from \"transformation-matrix\";\nimport * as d3 from \"d3\";\nimport { find, zipObject } from \"lodash\";\nimport { polygonHull } from \"d3-polygon\";\n\n// Using https://github.com/chrvadala/transformation-matrix for transformations\nclass KGrid {\n  constructor() {\n    this.kPoints = [];\n    this.lines = [];\n\n    const qTree = d3\n      .quadtree()\n      .x(d => d.x)\n      .y(d => d.y);\n\n    this.qTree = qTree;\n  }\n\n  intitialize(width, height) {\n    this.width = width;\n    this.height = height;\n\n    this.setup();\n  }\n\n  setup() {\n    this.F = 20;\n    this.H = 2 * this.F;\n    this.G = SQRT_3 * this.F;\n\n    this.HEX_W = 2 * this.G;\n    this.N_HEX_COLS = Math.ceil(this.width / this.HEX_W);\n    this.N_HEX_ROWS = Math.ceil(this.height / (this.F + this.H));\n\n    this.genGrid();\n  }\n\n  // THIS DRAWS THE POLYGON THAT REPRESENT DOG COORDS\n  // const polygons = Object.entries(R.groupBy(d => `${d.i}.${d.j}`)(pts)).map(\n  //   ([k, v]) => {\n  //     var path = d3.path();\n  //     path.moveTo(v[0].x, v[0].y);\n  //     for (let i = 0; i < v.length; i++) {\n  //       path.lineTo(v[i].x, v[i].y);\n  //     }\n  //     path.closePath();\n\n  //     return path.toString();\n  //   }\n  // );\n\n  // var path = d3.path();\n  // if (shape.length) {\n  //   path.moveTo(shape[0][0], shape[0][1]);\n  //   for (let i = 0; i < shape.length; i++) {\n  //     path.lineTo(shape[i][0], shape[i][1]);\n  //   }\n  //   path.closePath();\n  // }\n\n  // const shapePath = path.toString();\n\n  createKPoint(kPoint) {\n    if (Array.isArray(kPoint) && kPoint.length === 4) {\n      kPoint = zipObject([\"ant\", \"bat\", \"cat\", \"dog\"], kPoint);\n    }\n    return find(this.kPoints, kPoint);\n  }\n\n  genGrid() {\n    const kPoints = [];\n    const lines = [];\n\n    for (const [idx, i, j] of GridGenerator(this.N_HEX_COLS, this.N_HEX_ROWS)) {\n      let x0, ant, bat;\n      if (isOdd(j)) {\n        x0 = i * this.HEX_W + this.HEX_W / 2;\n        ant = (j + 1) / 2 + i;\n        bat = (1 - j) / 2 + i;\n      } else {\n        x0 = i * this.HEX_W;\n        ant = j / 2 + i;\n        bat = i - j / 2;\n      }\n\n      for (let d = 0; d < 6; d++) {\n        const cat = j;\n        const dog = d;\n\n        const y0 = j * (this.F + this.H);\n\n        let dx, dy;\n        if (d === 0) {\n          dx = 0;\n          dy = 0;\n        } else {\n          const angle = ((-30 * d + 150) * Math.PI) / 180;\n          if (isOdd(d)) {\n            dx = this.G * Math.cos(angle);\n            dy = -this.G * Math.sin(angle);\n          } else {\n            dx = this.H * Math.cos(angle);\n            dy = -this.H * Math.sin(angle);\n          }\n        }\n\n        const xD = x0 + dx;\n        const yD = y0 + dy;\n\n        kPoints.push(\n          KPoint(\n            {\n              idx: `${idx}.${d}`,\n              i,\n              j,\n              x: xD,\n              y: yD,\n              ant,\n              bat,\n              cat,\n              dog\n            },\n            this\n          )\n        );\n\n        // Gen Spokes\n        for (let d = 0; d < 12; d++) {\n          const angle = (d * 2 * Math.PI) / 12;\n\n          let dx, dy;\n\n          if (d % 2) {\n            dx = this.H * Math.cos(angle);\n            dy = -this.H * Math.sin(angle);\n          } else {\n            dx = this.G * Math.cos(angle);\n            dy = -this.G * Math.sin(angle);\n          }\n\n          lines.push([\n            [x0, y0],\n            [x0 + dx, y0 + dy]\n          ]);\n        }\n\n        // Gen Edges\n        // See Page 60 of notes\n        for (let d = 0; d < 6; d++) {\n          const angle1 = ((-30 * d + 150) * Math.PI) / 180;\n          const angle2 = ((-30 * (d + 1) + 150) * Math.PI) / 180;\n\n          let dx1, dy1, dx2, dy2;\n\n          if (d % 2) {\n            dx1 = this.G * Math.cos(angle1);\n            dy1 = -this.G * Math.sin(angle1);\n            dx2 = this.H * Math.cos(angle2);\n            dy2 = -this.H * Math.sin(angle2);\n          } else {\n            dx1 = this.H * Math.cos(angle1);\n            dy1 = -this.H * Math.sin(angle1);\n            dx2 = this.G * Math.cos(angle2);\n            dy2 = -this.G * Math.sin(angle2);\n          }\n\n          lines.push([\n            [x0 + dx1, y0 + dy1],\n            [x0 + dx2, y0 + dy2]\n          ]);\n        }\n      }\n    }\n\n    this.qTree.addAll(kPoints);\n    this.kPoints = kPoints;\n    this.lines = lines;\n  }\n\n  getGrid() {\n    return {\n      pts: this.kPoints,\n      lines: this.lines\n    };\n  }\n}\n\nexport const KPoint = (kPoint, kgrid) => {\n  kPoint.rotate = rotationAngle => {\n    const { x, y } = kPoint;\n\n    const r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n    const angle = Math.atan2(y, x);\n    const newAngle = angle + rotationAngle;\n\n    const newX = r * Math.cos(newAngle);\n    const newY = r * Math.sin(newAngle);\n\n    return kgrid.qTree.find(newX, newY);\n  };\n\n  kPoint.translate = ({ dAnt = 0, dBat = 0, dCat = 0, dDog = 0 }) => {\n    return kgrid.createKPoint({\n      ant: kPoint.ant + dAnt,\n      bat: kPoint.bat + dBat,\n      cat: kPoint.cat + dCat,\n      dog: kPoint.dog + dDog\n    });\n  };\n\n  return kPoint;\n};\n\nexport class KPolygon {\n  constructor(kPoints, color) {\n    this.kPoints = kPoints;\n    this.color = color;\n  }\n\n  tMat() {\n    const hull1 = this.color.hull;\n    const hull2 = this.kPoints;\n\n    // get transMatrix from hull1 to hull2\n    const triangle1 = hull1.slice(0, 3).map(d => [d.x, d.y]);\n    const triangle2 = hull2.slice(0, 3).map(d => [d.x, d.y]);\n    return fromTriangles(triangle1, triangle2);\n  }\n\n  copy() {\n    return new KPolygon(this.kPoints, this.color);\n  }\n\n  rotate(rotationAngle) {\n    this.kPoints = this.kPoints.map(d => d.rotate(rotationAngle));\n    return this;\n  }\n\n  translate(translation) {\n    this.kPoints = this.kPoints.map(d => d.translate(translation));\n    return this;\n  }\n\n  pathString(tMat) {\n    var path = d3.path();\n\n    const points = this.kPoints.map(d => [d.x, d.y]);\n\n    const newPoints = tMat ? applyToPoints(tMat, points) : points;\n\n    if (newPoints.length) {\n      path.moveTo(newPoints[0][0], newPoints[0][1]);\n      newPoints.forEach(([x, y]) => path.lineTo(x, y));\n      path.closePath();\n    }\n\n    return path.toString();\n  }\n}\n\nexport class KPolygonGroup {\n  constructor(kPolygons = [], hull = []) {\n    this.kPolygons = kPolygons;\n    this.hull = hull;\n  }\n\n  add(kPolygon) {\n    this.kPolygons.push(kPolygon);\n  }\n\n  copy() {\n    return new KPolygonGroup(this.kPolygons.map(kP => kP.copy()));\n  }\n\n  rotate(rotationAngle) {\n    this.kPolygons = this.kPolygons.map(kP => kP.rotate(rotationAngle));\n    return this;\n  }\n\n  hullString() {\n    const pts = this.kPolygons.flatMap(kPolygon =>\n      kPolygon.kPoints.map(kPoint => kPoint)\n    );\n\n    const hull = polygonHull(\n      pts.map(kPoint => [kPoint.x, kPoint.y, kPoint.idx])\n    );\n\n    console.log(\n      pts,\n      hull,\n      pts.find(pt => pt.idx === \"96.0\")\n    );\n\n    var path = d3.path();\n\n    if (this.hull.length) {\n      path.moveTo(this.hull[0].x, this.hull[0].y);\n      this.hull.forEach(kP => path.lineTo(kP.x, kP.y));\n      path.closePath();\n    }\n\n    return path.toString();\n  }\n\n  translate(translation) {\n    this.kPolygons = this.kPolygons.map(kP => kP.translate(translation));\n    return this;\n  }\n}\n\nexport default KGrid;\n","export const colors = {\n  base: \"#F2FBFD\",\n  dark: \"#002C3E\",\n  a1: \"#049DD9\",\n  a2: \"#04B2D9\",\n  highlight: \"#F20544\",\n  highlight_dull: \"#FB93AF\"\n};\n","import React from \"react\";\nimport { colors } from \"./colors\";\n\nexport const GridLines = React.memo(({ lines }) => (\n  <>\n    {lines.map((line, idx) => (\n      <line\n        key={idx}\n        x1={line[0][0]}\n        y1={line[0][1]}\n        x2={line[1][0]}\n        y2={line[1][1]}\n        stroke={\"#eee\"}\n      />\n    ))}\n  </>\n));\n\nexport const GridPoints = React.memo(({ points, activePoint }) => (\n  <>\n    {points.map((pt, idx) => (\n      <circle\n        key={idx}\n        cx={pt.x}\n        cy={pt.y}\n        // r={pt.idx === activeIdx ? 5 : 2}\n        r={3}\n        fill={pt === activePoint ? colors.highlight : \"#ddd\"}\n      />\n    ))}\n  </>\n));\n","import { KPolygon, KPolygonGroup } from \"../kcanvas\";\n\n// Triangle with Red center hexagon and green tips\n\nconst createShape = kgrid => {\n  // Octagon\n  const octagon = new KPolygon(\n    [\n      kgrid.createKPoint([1, 0, 1, 0]),\n      kgrid.createKPoint([0, -1, 1, 0]),\n      kgrid.createKPoint([-1, -1, 0, 0]),\n      kgrid.createKPoint([-1, 0, -1, 0]),\n      kgrid.createKPoint([0, 1, -1, 0]),\n      kgrid.createKPoint([1, 1, 0, 0])\n    ],\n    \"red\"\n  );\n\n  const triangle = new KPolygon(\n    [\n      kgrid.createKPoint([-2, 2, -4, 0]),\n      kgrid.createKPoint([-2, 0, -2, 0]),\n      kgrid.createKPoint([0, 2, -2, 0])\n    ],\n    \"green\"\n  );\n\n  const fillShape = new KPolygon(\n    [\n      kgrid.createKPoint([-1, 1, -2, 0]),\n      kgrid.createKPoint([-2, 0, -2, 0]),\n      kgrid.createKPoint([-2, -1, -1, 0]),\n      kgrid.createKPoint([-1, -1, 0, 3]),\n      kgrid.createKPoint([-1, 0, -1, 0]),\n      kgrid.createKPoint([-1, 0, -1, 5])\n    ],\n    \"orange\"\n  );\n\n  const polygons = [octagon, triangle, fillShape];\n\n  for (let i = 1; i < 6; i++) {\n    polygons.push(fillShape.copy().rotate((i * 60 * Math.PI) / 180));\n  }\n\n  for (let i = 1; i < 3; i++) {\n    polygons.push(triangle.copy().rotate((i * 120 * Math.PI) / 180));\n  }\n\n  const polygonGroup = new KPolygonGroup(polygons, [\n    kgrid.createKPoint([-2, -4, 2, 0]),\n    kgrid.createKPoint([-2, 2, -4, 0]),\n    kgrid.createKPoint([4, 2, 2, 0])\n  ]);\n\n  return polygonGroup;\n};\n\nexport default createShape;\n","import { KPolygon, KPolygonGroup } from \"../kcanvas\";\n\nconst shape1 = [\n  [-2, -2, 0, 1],\n  [-2, -2, 0, 2],\n  [-3, -2, -1, 4],\n  [-2, -1, -1, 2],\n  [-2, -1, -1, 4],\n  [-1, 0, -1, 2],\n  [-1, 0, -1, 4],\n  [0, 0, 0, 2],\n  [0, 0, 0, 3],\n  [0, 2, -2, 0],\n  [-4, -2, -2, 0]\n];\n\nconst shape2 = [\n  [-2, -2, 0, 0],\n  [-2, -2, 0, 1],\n  [-2, -2, 0, 2],\n  [-3, -2, -1, 4],\n  [-2, -1, -1, 0],\n  [-2, -1, -1, 5],\n  [-1, -1, 0, 2]\n];\n\nconst shape3 = [\n  [-2, -2, 0, 0],\n  [-1, -1, 0, 2],\n  [0, 0, 0, 0]\n];\n\nconst shape4 = [\n  [0, 0, 0, 0],\n  [-1, -1, 0, 2],\n  [-2, -1, -1, 5],\n  [-1, 0, -1, 0],\n  [-1, 0, -1, 4],\n  [0, 0, 0, 2],\n  [0, 0, 0, 3]\n];\n\nconst shape5 = [\n  [-3, -2, -1, 4],\n  [-2, -1, -1, 2],\n  [-2, -1, -1, 4],\n  [-1, 0, -1, 2],\n  [-1, 0, -1, 4],\n  [-1, 0, -1, 0],\n  [-2, -1, -1, 0]\n];\nconst createShape = kgrid => {\n  const p1 = new KPolygon(\n    shape1.map(p => kgrid.createKPoint(p)),\n    \"orange\"\n  );\n\n  const p2 = new KPolygon(\n    shape2.map(p => kgrid.createKPoint(p)),\n    \"blue\"\n  );\n\n  const p3 = new KPolygon(\n    shape3.map(p => kgrid.createKPoint(p)),\n    \"green\"\n  );\n\n  const p4 = new KPolygon(\n    shape4.map(p => kgrid.createKPoint(p)),\n    \"blue\"\n  );\n\n  const p5 = new KPolygon(\n    shape5.map(p => kgrid.createKPoint(p)),\n    \"red\"\n  );\n\n  return new KPolygonGroup(\n    [p1, p2, p3, p4, p5],\n    [\n      kgrid.createKPoint([-2, -2, 0, 0]),\n      kgrid.createKPoint([-4, -2, -2, 0]),\n      kgrid.createKPoint([0, 2, -2, 0]),\n      kgrid.createKPoint([0, 0, 0, 0])\n    ]\n  );\n};\n\nexport default createShape;\n","import { KPolygon, KPolygonGroup } from \"../kcanvas\";\nimport Shape1 from \"./shape1\";\nimport Shape3 from \"./shape3\";\n\nconst createShape = kgrid => {\n  const kG1 = Shape1(kgrid);\n\n  const p3 = new KPolygon(\n    [\n      [0, 1, -1, 0],\n      [0, 2, -2, 0],\n      [2, 2, 0, 0],\n      [1, 1, 0, 0]\n    ].map(p => kgrid.createKPoint(p)),\n    Shape3(kgrid)\n  );\n\n  const t1Polygons = [\n    new KPolygon(\n      [\n        kgrid.createKPoint([0, 0, 0, 0]),\n        kgrid.createKPoint([0, 1, -1, 0]),\n        kgrid.createKPoint([1, 1, 0, 0])\n      ],\n      kG1\n    ),\n    p3\n  ];\n\n  // for (let i = 1; i < 6; i++) {\n  //   t1Polygons.push(t1Polygons[0].copy().rotate((i * 60 * Math.PI) / 180));\n  // }\n\n  const pg1 = new KPolygonGroup(\n    t1Polygons,\n    [\n      [0, 0, 0, 0],\n      [2, 2, 0, 0],\n      [0, 2, -2, 0]\n    ].map(p => kgrid.createKPoint(p))\n  );\n\n  return new KPolygon(\n    [\n      [0, 0, 0, 0],\n      [2, 2, 0, 0],\n      [0, 2, -2, 0]\n    ].map(p => kgrid.createKPoint(p)),\n    pg1\n  );\n};\n\nexport default createShape;\n","import { KPolygon, KPolygonGroup } from \"../kcanvas\";\nimport Shape2 from \"./shape2\";\n\nconst createShape = kgrid => {\n  const polygons = [Shape2(kgrid)];\n\n  for (let i = 1; i < 6; i++) {\n    polygons.push(polygons[0].copy().rotate((i * 60 * Math.PI) / 180));\n  }\n\n  return new KPolygon(\n    [\n      [2, 2, 0, 0],\n      [0, 2, -2, 0],\n      [-2, 0, -2, 0],\n      [-2, -2, 0, 0],\n      [0, -2, 2, 0],\n      [2, 0, 2, 0]\n    ].map(p => kgrid.createKPoint(p)),\n    new KPolygonGroup(\n      polygons,\n      [\n        [2, 2, 0, 0],\n        [0, 2, -2, 0],\n        [-2, 0, -2, 0],\n        [-2, -2, 0, 0],\n        [0, -2, 2, 0],\n        [2, 0, 2, 0]\n      ].map(p => kgrid.createKPoint(p))\n    )\n  );\n};\n\nexport default createShape;\n","import React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport KGrid, { KPolygon, KPolygonGroup } from \"./kcanvas\";\nimport { GridLines, GridPoints } from \"./Grid\";\nimport { compose } from \"transformation-matrix\";\n\nimport Shape2 from \"./shapes/shape2\";\nimport Shape3 from \"./shapes/shape3\";\nimport Shape4 from \"./shapes/shape4\";\n\n// See Page 58 in Notes\n\n// const kgrid = new KGrid();\n\nconst Canvas = ({ mouseOver }) => {\n  const cRef = useRef(null);\n\n  const [canvasDims] = useState({ width: 800, height: 500 });\n  const [activePoint, setActivePoint] = useState(null);\n  const [gridPoints, setGridPoints] = useState([]);\n  const [gridLines, setGridLines] = useState([]);\n  const [kGrid] = useState(new KGrid());\n  const [polygons, setPolygons] = useState([]);\n  const [clickedPoints, setClickedPoints] = useState([]);\n\n  const mouseMove = ({ x, y }) => {\n    const { x: rX, y: rY } = cRef.current.getBoundingClientRect();\n    const pt = kGrid.qTree.find(\n      x - rX - canvasDims.width / 2,\n      y - rY - canvasDims.height / 2\n    );\n    if (pt && pt !== activePoint) {\n      setActivePoint(pt);\n      mouseOver(pt);\n    }\n  };\n\n  const mouseClick = useCallback(\n    ({ x, y }) => {\n      const { x: rX, y: rY } = cRef.current.getBoundingClientRect();\n      const pt = kGrid.qTree.find(\n        x - rX - canvasDims.width / 2,\n        y - rY - canvasDims.height / 2\n      );\n\n      setClickedPoints([...clickedPoints, pt]);\n    },\n    [clickedPoints]\n  );\n\n  const keyPress = ({ key }) => {\n    if (key === \"c\") {\n      setClickedPoints([]);\n    }\n  };\n\n  useEffect(() => {\n    const width = cRef.current.clientWidth;\n    const height = cRef.current.clientHeight;\n\n    console.log(\"KGRID init\");\n    kGrid.intitialize(width, height);\n\n    const svgNode = cRef.current;\n\n    setPolygons([\n      Shape4(kGrid),\n      Shape4(kGrid)\n        .copy()\n        .translate({ dAnt: -4, dBat: -2, dCat: -2 }),\n      Shape4(kGrid)\n        .copy()\n        .translate({ dAnt: -2, dBat: -4, dCat: 2 }),\n      Shape4(kGrid)\n        .copy()\n        .translate({ dAnt: 4, dBat: 2, dCat: 2 }),\n      Shape4(kGrid)\n        .copy()\n        .translate({ dAnt: 2, dBat: 4, dCat: -2 }),\n      Shape4(kGrid)\n        .copy()\n        .translate({ dAnt: 2, dBat: -2, dCat: 4 })\n      // Shape4(kGrid)\n      //   .copy()\n      //   .translate({ dAnt: -2, dBat: 2, dCat: -4 })\n    ]);\n\n    const { pts, lines } = kGrid.getGrid();\n\n    setGridPoints(pts);\n    setGridLines(lines);\n\n    svgNode.addEventListener(\"mousemove\", mouseMove);\n    window.addEventListener(\"keypress\", keyPress);\n\n    return () => {\n      svgNode.removeEventListener(\"mousemove\", mouseMove);\n      window.removeEventListener(\"keypress\", keyPress);\n    };\n  }, []);\n\n  useEffect(() => {\n    const svgNode = cRef.current;\n    svgNode.addEventListener(\"click\", mouseClick);\n\n    return () => {\n      svgNode.removeEventListener(\"click\", mouseClick);\n    };\n  }, [mouseClick]);\n\n  return (\n    <div>\n      {JSON.stringify(clickedPoints.map(d => [d.ant, d.bat, d.cat, d.dog]))}\n      <svg ref={cRef} width={canvasDims.width} height={canvasDims.height}>\n        <g\n          transform={`translate(${canvasDims.width / 2}, ${canvasDims.height /\n            2})`}\n        >\n          <GridLines lines={gridLines} />\n          <GridPoints points={gridPoints} activePoint={activePoint} />\n          {polygons.map((kPolygon, idx) => (\n            <Polygon key={idx} kPolygon={kPolygon} />\n          ))}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nconst PolygonGroup = React.memo(({ kPolygonGroup, drawHull = false }) => {\n  return (\n    <g>\n      {kPolygonGroup.kPolygons.map((kPolygon, idx) => (\n        <Polygon key={idx} kPolygon={kPolygon} tMat={kPolygonGroup.tMat} />\n      ))}\n    </g>\n  );\n});\n\nconst Polygon = React.memo(({ kPolygon, tMat }) => {\n  if (kPolygon.color instanceof KPolygonGroup) {\n    let tMat2;\n    if (tMat) {\n      tMat2 = compose([tMat, kPolygon.tMat()]);\n    } else {\n      tMat2 = kPolygon.tMat();\n    }\n\n    return (\n      <>\n        {kPolygon.color.kPolygons.map((kPolygon, idx) => (\n          <Polygon key={idx} kPolygon={kPolygon} tMat={tMat2} />\n        ))}\n      </>\n    );\n  } else {\n    return (\n      <path\n        d={kPolygon.pathString(tMat)}\n        fill={kPolygon.color}\n        fillOpacity={0.4}\n        stroke={\"black\"}\n        strokeWidth={3}\n        strokeLinejoin=\"round\"\n      />\n    );\n  }\n});\n\nexport default Canvas;\n","import React, { useState } from \"react\";\nimport Canvas from \"./canvas\";\n\nfunction App() {\n  const [activePt, setActivePt] = useState(null);\n  const mouseOver = pt => {\n    setActivePt(pt);\n  };\n\n  return (\n    <div>\n      <div className=\"mx-auto mt-10 shadow flex flex-row w-8/12\">\n        <Canvas mouseOver={mouseOver} />\n        {activePt && (\n          <ul>\n            <li>ANT: {activePt.ant}</li>\n            <li>BAT: {activePt.bat}</li>\n            <li>CAT: {activePt.cat}</li>\n            <li>DOG: {activePt.dog}</li>\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}