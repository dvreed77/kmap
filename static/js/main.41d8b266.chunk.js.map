{"version":3,"sources":["colors.js","utils.js","kcanvas.js","canvas.js","App.js","index.js"],"names":["colors","GridGenerator","SQRT_3","Math","sqrt","isOdd","d","nCols","nRows","cStart","cEnd","rStart","rEnd","idx","i","j","KGrid","this","pts","lines","qTree","d3","x","y","width","height","setup2","N_HEX_COLS","HEX_W","F","H","G","N_HEX_ROWS","ceil","createGrid","createLines","genGrid","x0","ant","bat","cat","dog","y0","dx","dy","angle","PI","cos","sin","xD","yD","push","angle1","angle2","dx1","dy1","dx2","dy2","addAll","kP","j0","kPoint","rotationAngle","cP","convertHexPointToCanvasPoint","xP","yP","r","pow","atan2","newAngle","newX","newY","find","KPoint","kPolygon","newPoints","kPoints","map","rotateKPoint","KPolygon","kGrid","console","log","path","pt","length","moveTo","lineTo","closePath","toString","startShapes","color","kgrid","GridLines","React","memo","line","key","x1","y1","x2","y2","stroke","GridPoints","points","activePoint","cx","cy","fill","Shapes","shapes","polygon","draw","fillOpacity","strokeWidth","Canvas","gridDensity","mouseOver","cRef","useRef","useState","setActivePoint","gridPoints","setGridPoints","gridLines","setGridLines","setShapes","mouseMove","current","getBoundingClientRect","rX","rY","useEffect","clientWidth","clientHeight","intitialize","myShapes","rotateKPolygon","getGrid","addEventListener","removeEventListener","ref","App","activePt","setActivePt","setGridDensity","className","min","max","defaultValue","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41d8b266.chunk.js","sourcesContent":["{\n  /* <palette>\n<color name='Illustration-1' rgb='BFCDD9' r='190' g='204' b='216' />\n<color name='Illustration-2' rgb='D9BD6A' r='216' g='189' b='106' />\n<color name='Illustration-3' rgb='F2DEA2' r='242' g='222' b='162' />\n<color name='Illustration-4' rgb='BF9B7A' r='191' g='154' b='122' />\n<color name='Illustration-5' rgb='734C36' r='114' g='76' b='53' />\n</palette> */\n}\n\nexport const colors = {\n  base: \"#F2FBFD\",\n  dark: \"#002C3E\",\n  a1: \"#049DD9\",\n  a2: \"#04B2D9\",\n  highlight: \"#F20544\",\n  highlight_dull: \"#FB93AF\"\n};\n","export const SQRT_3 = Math.sqrt(3);\n\nexport const isOdd = d => !!(d % 2);\n\nexport function* GridGenerator(nCols, nRows) {\n  let cStart, cEnd;\n  if (isOdd(nCols)) {\n    cStart = -(nCols - 1) / 2 - 1;\n    cEnd = (nCols - 1) / 2 + 1;\n  } else {\n    cStart = -nCols / 2 - 1;\n    cEnd = nCols / 2 + 1;\n  }\n\n  let rStart, rEnd;\n  if (isOdd(nRows)) {\n    rStart = -(nRows - 1) / 2;\n    rEnd = (nRows - 1) / 2 + 1;\n  } else {\n    rStart = -nRows / 2;\n    rEnd = nRows / 2 + 1;\n  }\n\n  let idx = 0;\n  for (let i = cStart; i < cEnd; i++) {\n    for (let j = rStart; j < rEnd; j++) {\n      yield [idx, i, j];\n      idx++;\n    }\n  }\n}\n","import { SQRT_3, GridGenerator, isOdd } from \"./utils\";\nimport * as d3 from \"d3\";\nclass KGrid {\n  constructor() {\n    this.pts = [];\n    this.lines = [];\n\n    const qTree = d3\n      .quadtree()\n      .x(d => d.x)\n      .y(d => d.y);\n\n    this.qTree = qTree;\n  }\n\n  intitialize(width, height) {\n    this.width = width;\n    this.height = height;\n\n    this.setup2();\n  }\n\n  setup1() {\n    this.N_HEX_COLS = 7;\n    this.HEX_W = this.width / this.N_HEX_COLS;\n    this.F = this.HEX_W / (2 * SQRT_3);\n    this.H = this.HEX_W / SQRT_3;\n    this.G = this.HEX_W / 2;\n    this.N_HEX_ROWS = Math.ceil(this.height / (this.F + this.H));\n\n    this.createGrid();\n    this.createLines();\n  }\n\n  setup2() {\n    this.F = 20;\n    this.H = 2 * this.F;\n    this.G = SQRT_3 * this.F;\n\n    this.HEX_W = 2 * this.G;\n    this.N_HEX_COLS = Math.ceil(this.width / this.HEX_W);\n    this.N_HEX_ROWS = Math.ceil(this.height / (this.F + this.H));\n\n    this.genGrid();\n  }\n\n  genGrid() {\n    const pts = [];\n    const lines = [];\n\n    for (const [idx, i, j] of GridGenerator(this.N_HEX_COLS, this.N_HEX_ROWS)) {\n      let x0, ant, bat;\n      if (isOdd(j)) {\n        x0 = i * this.HEX_W + this.HEX_W / 2 + this.width / 2;\n        ant = (j + 1) / 2 + i;\n        bat = (1 - j) / 2 + i;\n      } else {\n        x0 = i * this.HEX_W + this.width / 2;\n        ant = j / 2 + i;\n        bat = i - j / 2;\n      }\n\n      for (let d = 0; d < 6; d++) {\n        const cat = j;\n        const dog = d;\n\n        const y0 = j * (this.F + this.H) + this.height / 2;\n\n        let dx, dy;\n        if (d === 0) {\n          dx = 0;\n          dy = 0;\n        } else {\n          const angle = ((-30 * d + 150) * Math.PI) / 180;\n          if (isOdd(d)) {\n            dx = this.G * Math.cos(angle);\n            dy = -this.G * Math.sin(angle);\n          } else {\n            dx = this.H * Math.cos(angle);\n            dy = -this.H * Math.sin(angle);\n          }\n        }\n\n        const xD = x0 + dx;\n        const yD = y0 + dy;\n\n        pts.push({\n          idx: `${idx}.${d}`,\n          i,\n          j,\n          x: xD,\n          y: yD,\n          ant,\n          bat,\n          cat,\n          dog\n        });\n\n        // Gen Spokes\n        for (let d = 0; d < 12; d++) {\n          const angle = (d * 2 * Math.PI) / 12;\n\n          let dx, dy;\n\n          if (d % 2) {\n            dx = this.H * Math.cos(angle);\n            dy = -this.H * Math.sin(angle);\n          } else {\n            dx = this.G * Math.cos(angle);\n            dy = -this.G * Math.sin(angle);\n          }\n\n          lines.push([\n            [x0, y0],\n            [x0 + dx, y0 + dy]\n          ]);\n        }\n\n        // Gen Edges\n        // See Page 60 of notes\n        for (let d = 0; d < 6; d++) {\n          const angle1 = ((-30 * d + 150) * Math.PI) / 180;\n          const angle2 = ((-30 * (d + 1) + 150) * Math.PI) / 180;\n\n          let dx1, dy1, dx2, dy2;\n\n          if (d % 2) {\n            dx1 = this.G * Math.cos(angle1);\n            dy1 = -this.G * Math.sin(angle1);\n            dx2 = this.H * Math.cos(angle2);\n            dy2 = -this.H * Math.sin(angle2);\n          } else {\n            dx1 = this.H * Math.cos(angle1);\n            dy1 = -this.H * Math.sin(angle1);\n            dx2 = this.G * Math.cos(angle2);\n            dy2 = -this.G * Math.sin(angle2);\n          }\n\n          lines.push([\n            [x0 + dx1, y0 + dy1],\n            [x0 + dx2, y0 + dy2]\n          ]);\n        }\n      }\n    }\n\n    this.qTree.addAll(pts);\n    this.pts = pts;\n    this.lines = lines;\n  }\n\n  getGrid() {\n    return {\n      pts: this.pts,\n      lines: this.lines\n    };\n  }\n\n  convertHexPointToCanvasPoint(kP) {\n    const j0 = kP.cat;\n    let i0, x0;\n    if (j0 % 2) {\n      i0 = kP.ant - (j0 + 1) / 2;\n      x0 = i0 * this.HEX_W + this.HEX_W / 2 + this.width / 2;\n    } else {\n      i0 = kP.ant - j0 / 2;\n      x0 = i0 * this.HEX_W + this.width / 2;\n    }\n\n    const y0 = (j0 * 3 * this.HEX_W) / (2 * SQRT_3) + this.height / 2;\n\n    let dx, dy;\n    if (kP.dog === 0) {\n      dx = 0;\n      dy = 0;\n    } else {\n      const angle = ((-30 * kP.dog + 150) * Math.PI) / 180;\n      if (kP.dog % 2) {\n        dx = this.G * Math.cos(angle);\n        dy = -this.G * Math.sin(angle);\n      } else {\n        dx = this.H * Math.cos(angle);\n        dy = -this.H * Math.sin(angle);\n      }\n    }\n    return [x0 + dx, y0 + dy];\n  }\n\n  rotateKPoint(kPoint, rotationAngle = 0) {\n    const cP = this.convertHexPointToCanvasPoint(kPoint);\n    const xP = cP[0] - this.width / 2;\n    const yP = cP[1] - this.height / 2;\n\n    const r = Math.sqrt(Math.pow(xP, 2) + Math.pow(yP, 2));\n    const angle = Math.atan2(yP, xP);\n    const newAngle = angle + rotationAngle;\n\n    const newX = r * Math.cos(newAngle);\n    const newY = r * Math.sin(newAngle);\n\n    const { ant, bat, cat, dog } = this.qTree.find(\n      newX + this.width / 2,\n      newY + this.height / 2\n    );\n\n    return KPoint({\n      ant,\n      bat,\n      cat,\n      dog\n    });\n  }\n\n  rotateKPolygon(kPolygon, rotationAngle) {\n    const newPoints = kPolygon.kPoints.map(d =>\n      this.rotateKPoint(d, rotationAngle)\n    );\n\n    return new KPolygon(newPoints, this);\n  }\n}\n\n// class KPoint {\n//   constructor(ant, bat, cat, dog) {\n//     this.ant = ant;\n//     this.bat = bat;\n//     this.cat = cat;\n//     this.dog = dog;\n//   }\n// }\n\nexport const KPoint = ({ ant, bat, cat, dog }) => {\n  return { ant, bat, cat, dog };\n};\n\nexport class KPolygon {\n  constructor(kPoints, kGrid) {\n    console.log(\"KPolygon\", kPoints);\n    this.kPoints = kPoints;\n    this.kGrid = kGrid;\n  }\n\n  draw() {\n    var path = d3.path();\n\n    const pts = this.kPoints.map(pt =>\n      this.kGrid.convertHexPointToCanvasPoint(pt)\n    );\n\n    if (pts.length) {\n      path.moveTo(pts[0][0], pts[0][1]);\n      for (let i = 0; i < pts.length; i++) {\n        path.lineTo(pts[i][0], pts[i][1]);\n      }\n      path.closePath();\n    }\n\n    return path.toString();\n  }\n}\n\nexport default KGrid;\n","import React, { useRef, useEffect, useState, useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport { colors } from \"./colors\";\nimport * as R from \"ramda\";\nimport KGrid, { KPolygon, KPoint } from \"./kcanvas\";\n\n// See Page 58 in Notes\nconst startShapes = [\n  {\n    pts: [\n      [1, 0, 1, 0],\n      [0, -1, 1, 0],\n      [-1, -1, 0, 0],\n      [-1, 0, -1, 0],\n      [0, 1, -1, 0],\n      [1, 1, 0, 0]\n    ],\n    color: \"red\"\n  },\n  {\n    pts: [\n      [-2, 2, -4, 0],\n      [-2, 0, -2, 0],\n      [0, 2, -2, 0]\n    ],\n    color: \"green\"\n  },\n  {\n    pts: [\n      [-2, -2, 0, 0],\n      [-2, -4, 2, 0],\n      [0, -2, 2, 0]\n    ],\n    color: \"green\"\n  },\n  {\n    pts: [\n      [2, 2, 0, 0],\n      [2, 0, 2, 0],\n      [4, 2, 2, 0]\n    ],\n    color: \"green\"\n  },\n  {\n    pts: [\n      [-1, 1, -2, 0],\n      [-2, 0, -2, 0],\n      [-2, -1, -1, 0],\n      [-1, -1, 0, 3],\n      [-1, 0, -1, 0],\n      [-1, 0, -1, 5]\n    ],\n    color: \"orange\"\n  }\n];\n\nconst kgrid = new KGrid();\n\nconst GridLines = React.memo(({ lines }) => (\n  <>\n    {lines.map((line, idx) => (\n      <line\n        key={idx}\n        x1={line[0][0]}\n        y1={line[0][1]}\n        x2={line[1][0]}\n        y2={line[1][1]}\n        stroke={\"#eee\"}\n      />\n    ))}\n  </>\n));\n\nconst GridPoints = React.memo(({ points, activePoint }) => (\n  <>\n    {points.map((pt, idx) => (\n      <circle\n        key={idx}\n        cx={pt.x}\n        cy={pt.y}\n        // r={pt.idx === activeIdx ? 5 : 2}\n        r={3}\n        fill={pt === activePoint ? colors.highlight : \"#ddd\"}\n      />\n    ))}\n  </>\n));\n\nconst Shapes = React.memo(({ shapes }) => (\n  <>\n    {shapes.map(({ polygon, color }, idx) => (\n      <path\n        key={idx}\n        d={polygon.draw(kgrid)}\n        fill={color}\n        fillOpacity={0.4}\n        stroke={\"black\"}\n        strokeWidth={3}\n      />\n    ))}\n  </>\n));\nconst Canvas = ({ gridDensity, mouseOver }) => {\n  const cRef = useRef(null);\n  const [activePoint, setActivePoint] = useState(null);\n  const [gridPoints, setGridPoints] = useState([]);\n  const [gridLines, setGridLines] = useState([]);\n  const [shapes, setShapes] = useState([]);\n\n  const mouseMove = ({ x, y }) => {\n    const { x: rX, y: rY } = cRef.current.getBoundingClientRect();\n    const pt = kgrid.qTree.find(x - rX, y - rY);\n    if (pt && pt !== activePoint) {\n      setActivePoint(pt);\n      mouseOver(pt);\n    }\n  };\n\n  useEffect(() => {\n    const width = cRef.current.clientWidth;\n    const height = cRef.current.clientHeight;\n\n    kgrid.intitialize(width, height);\n\n    const myShapes = startShapes.map(({ pts, color }) => ({\n      color,\n      polygon: new KPolygon(\n        pts.map(pt =>\n          KPoint({ ant: pt[0], bat: pt[1], cat: pt[2], dog: pt[3] })\n        ),\n        kgrid\n      )\n    }));\n\n    console.log(kgrid.rotateKPoint({ ant: -2, bat: -1, cat: -1, dog: 0 }));\n\n    for (let i = 1; i < 6; i++) {\n      myShapes.push({\n        color: myShapes[4].color,\n        polygon: kgrid.rotateKPolygon(\n          myShapes[4].polygon,\n          (i * 60 * Math.PI) / 180\n        )\n      });\n\n      // console.log(\"KKK\", kgrid.rotateKPolygon(myShapes[4].polygon, i * 60));\n    }\n\n    setShapes(myShapes);\n\n    kgrid.rotateKPoint(\n      {\n        ant: -2,\n        bat: -1,\n        cat: -1,\n        dog: 0\n      },\n      (60 * Math.PI) / 180\n    );\n\n    const { pts, lines } = kgrid.getGrid();\n\n    setGridPoints(pts);\n    setGridLines(lines);\n\n    cRef.current.addEventListener(\"mousemove\", mouseMove);\n\n    return () => {\n      cRef.current.removeEventListener(\"mousemove\", mouseMove);\n    };\n  }, []);\n\n  // const setActive = (pt, idx) => {\n  //   mouseOver(pt);\n  //   setActiveIdx(idx);\n  // };\n\n  // console.log(gridPoints);\n\n  // if (!kgrid) return <div></div>;\n\n  // const polygons = Object.entries(R.groupBy(d => `${d.i}.${d.j}`)(pts)).map(\n  //   ([k, v]) => {\n  //     var path = d3.path();\n  //     path.moveTo(v[0].x, v[0].y);\n  //     for (let i = 0; i < v.length; i++) {\n  //       path.lineTo(v[i].x, v[i].y);\n  //     }\n  //     path.closePath();\n\n  //     return path.toString();\n  //   }\n  // );\n\n  // var path = d3.path();\n  // if (shape.length) {\n  //   path.moveTo(shape[0][0], shape[0][1]);\n  //   for (let i = 0; i < shape.length; i++) {\n  //     path.lineTo(shape[i][0], shape[i][1]);\n  //   }\n  //   path.closePath();\n  // }\n\n  // const shapePath = path.toString();\n\n  return (\n    <div>\n      <svg ref={cRef} width={800} height={500}>\n        {/* {polygons.map((path, idx) => (\n          <path key={idx} d={path} fill={\"#eee\"} fillOpacity={0.5} />\n        ))} */}\n        <GridLines lines={gridLines} />\n\n        <GridPoints points={gridPoints} activePoint={activePoint} />\n\n        <Shapes shapes={shapes} />\n        {/* {pts.map((pt, idx) => (\n          <circle\n            key={idx}\n            cx={pt.x}\n            cy={pt.y}\n            r={6}\n            fill={\"black\"}\n            fillOpacity=\"0\"\n            onMouseOver={() => setActive(pt, idx)}\n            onMouseLeave={() => setActive(null)}\n          />\n        ))} */}\n      </svg>\n    </div>\n  );\n};\n\nexport default Canvas;\n","import React, { useState } from \"react\";\nimport { InputNumber } from \"antd\";\nimport Canvas from \"./canvas\";\n\nfunction App() {\n  const [activePt, setActivePt] = useState(null);\n  const [gridDensity, setGridDensity] = useState(1);\n  const mouseOver = pt => {\n    setActivePt(pt);\n  };\n\n  return (\n    <div>\n      <div className=\"mx-auto mt-10 shadow flex flex-row w-8/12\">\n        <Canvas gridDensity={gridDensity} mouseOver={mouseOver} />\n\n        <InputNumber\n          min={1}\n          max={4}\n          defaultValue={1}\n          onChange={setGridDensity}\n        />\n        {activePt && (\n          <ul>\n            <li>ANT: {activePt.ant}</li>\n            <li>BAT: {activePt.bat}</li>\n            <li>CAT: {activePt.cat}</li>\n            <li>DOG: {activePt.dog}</li>\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}