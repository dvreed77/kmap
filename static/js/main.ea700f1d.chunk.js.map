{"version":3,"sources":["colors.js","utils.js","kcanvas.js","canvas.js","App.js","index.js"],"names":["colors","SQRT_3","Math","sqrt","KGrid","width","height","this","N_HEX_COLS","HEX_W","F","H","G","N_HEX_ROWS","ceil","createGrid","createLines","pts","i","j","d","x0","ant","bat","cat","dog","y0","dx","dy","angle","PI","cos","sin","xD","yD","push","x","y","grid","lines","angle1","angle2","dx1","dy1","dx2","dy2","gridLines","kP","j0","Canvas","mouseOver","cRef","useRef","useState","points","setPoints","kgrid","setKGrid","shape","setShape","activeIdx","setActiveIdx","useEffect","kPt","convertHexPointToCanvasPoint","setActive","idx","polygons","Object","entries","R","map","v","path","d3","moveTo","length","lineTo","closePath","toString","shapePath","ref","line","key","x1","y1","x2","y2","stroke","fill","fillOpacity","pt","cx","cy","r","onMouseOver","onMouseLeave","App","activePt","setActivePt","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea700f1d.chunk.js","sourcesContent":["{\n  /* <palette>\n<color name='Illustration-1' rgb='BFCDD9' r='190' g='204' b='216' />\n<color name='Illustration-2' rgb='D9BD6A' r='216' g='189' b='106' />\n<color name='Illustration-3' rgb='F2DEA2' r='242' g='222' b='162' />\n<color name='Illustration-4' rgb='BF9B7A' r='191' g='154' b='122' />\n<color name='Illustration-5' rgb='734C36' r='114' g='76' b='53' />\n</palette> */\n}\n\nexport const colors = {\n  base: \"#F2FBFD\",\n  dark: \"#002C3E\",\n  a1: \"#049DD9\",\n  a2: \"#04B2D9\",\n  highlight: \"#F20544\",\n  highlight_dull: \"#FB93AF\"\n};\n","export const SQRT_3 = Math.sqrt(3);\n","import { SQRT_3 } from \"./utils\";\n\nclass KGrid {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.N_HEX_COLS = 9;\n    this.HEX_W = width / this.N_HEX_COLS;\n    this.F = this.HEX_W / (2 * SQRT_3);\n    this.H = this.HEX_W / SQRT_3;\n    this.G = this.HEX_W / 2;\n    this.N_HEX_ROWS = Math.ceil(height / (this.F + this.H));\n\n    this.createGrid();\n    this.createLines();\n  }\n\n  createGrid() {\n    const pts = [];\n    for (\n      let i = -(this.N_HEX_COLS - 1) / 2;\n      i < (this.N_HEX_COLS - 1) / 2;\n      i++\n    ) {\n      for (\n        let j = -(this.N_HEX_ROWS - 1) / 2;\n        j < (this.N_HEX_ROWS - 1) / 2;\n        j++\n      ) {\n        for (let d = 0; d < 6; d++) {\n          let x0, ant, bat;\n          if (j % 2) {\n            x0 = i * this.HEX_W + this.HEX_W / 2 + this.width / 2;\n            ant = (j + 1) / 2 + i;\n            bat = (1 - j) / 2 + i;\n          } else {\n            x0 = i * this.HEX_W + this.width / 2;\n            ant = j / 2 + i;\n            bat = i - j / 2;\n          }\n\n          const cat = j;\n          const dog = d;\n\n          const y0 = j * (this.F + this.H) + this.height / 2;\n\n          let dx, dy;\n          if (d === 0) {\n            dx = 0;\n            dy = 0;\n          } else {\n            const angle = ((-30 * d + 150) * Math.PI) / 180;\n            if (d % 2) {\n              dx = this.G * Math.cos(angle);\n              dy = -this.G * Math.sin(angle);\n            } else {\n              dx = this.H * Math.cos(angle);\n              dy = -this.H * Math.sin(angle);\n            }\n          }\n\n          const xD = x0 + dx;\n          const yD = y0 + dy;\n\n          pts.push({\n            i,\n            j,\n            x: xD,\n            y: yD,\n            ant,\n            bat,\n            cat,\n            dog\n          });\n        }\n      }\n    }\n\n    this.grid = pts;\n  }\n\n  createLines() {\n    const lines = [];\n    for (\n      let i = -(this.N_HEX_COLS - 1) / 2;\n      i < (this.N_HEX_COLS - 1) / 2;\n      i++\n    ) {\n      for (\n        let j = -(this.N_HEX_ROWS - 1) / 2;\n        j < (this.N_HEX_ROWS - 1) / 2;\n        j++\n      ) {\n        let x0;\n        if (j % 2) {\n          x0 = i * this.HEX_W + this.HEX_W / 2 + this.width / 2;\n        } else {\n          x0 = i * this.HEX_W + this.width / 2;\n        }\n\n        const y0 = j * (this.F + this.H) + this.height / 2;\n\n        // Gen Spokes\n        for (let d = 0; d < 12; d++) {\n          const angle = (d * 2 * Math.PI) / 12;\n\n          let dx, dy;\n\n          if (d % 2) {\n            dx = this.H * Math.cos(angle);\n            dy = -this.H * Math.sin(angle);\n          } else {\n            dx = this.G * Math.cos(angle);\n            dy = -this.G * Math.sin(angle);\n          }\n\n          lines.push([\n            [x0, y0],\n            [x0 + dx, y0 + dy]\n          ]);\n        }\n\n        // Gen Edges\n        // See Page 60 of notes\n        for (let d = 0; d < 6; d++) {\n          const angle1 = ((-30 * d + 150) * Math.PI) / 180;\n          const angle2 = ((-30 * (d + 1) + 150) * Math.PI) / 180;\n\n          let dx1, dy1, dx2, dy2;\n\n          if (d % 2) {\n            dx1 = this.G * Math.cos(angle1);\n            dy1 = -this.G * Math.sin(angle1);\n            dx2 = this.H * Math.cos(angle2);\n            dy2 = -this.H * Math.sin(angle2);\n          } else {\n            dx1 = this.H * Math.cos(angle1);\n            dy1 = -this.H * Math.sin(angle1);\n            dx2 = this.G * Math.cos(angle2);\n            dy2 = -this.G * Math.sin(angle2);\n          }\n\n          lines.push([\n            [x0 + dx1, y0 + dy1],\n            [x0 + dx2, y0 + dy2]\n          ]);\n        }\n      }\n    }\n\n    this.gridLines = lines;\n  }\n\n  convertHexPointToCanvasPoint(kP) {\n    const j0 = kP.cat;\n    let i0, x0;\n    if (j0 % 2) {\n      i0 = kP.ant - (j0 + 1) / 2;\n      x0 = i0 * this.HEX_W + this.HEX_W / 2 + this.width / 2;\n    } else {\n      i0 = kP.ant - j0 / 2;\n      x0 = i0 * this.HEX_W + this.width / 2;\n    }\n\n    // const x0 = i0 * this.HEX_W + this.width / 2;\n    const y0 = (j0 * 3 * this.HEX_W) / (2 * SQRT_3) + this.height / 2;\n\n    let dx, dy;\n    if (kP.dog === 0) {\n      dx = 0;\n      dy = 0;\n    } else {\n      const angle = ((-30 * kP.dog + 150) * Math.PI) / 180;\n      if (kP.dog % 2) {\n        dx = this.G * Math.cos(angle);\n        dy = -this.G * Math.sin(angle);\n      } else {\n        dx = this.H * Math.cos(angle);\n        dy = -this.H * Math.sin(angle);\n      }\n    }\n\n    return [x0 + dx, y0 + dy];\n  }\n}\n\nclass KPoint {\n  constructor(ant, bat, cat, dog) {\n    this.ant = ant;\n    this.bat = bat;\n    this.cat = cat;\n    this.dog = dog;\n  }\n}\n\nclass KPolygon {\n  constructor(pts) {}\n}\n\nexport default KGrid;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { colors } from \"./colors\";\nimport * as R from \"ramda\";\nimport KGrid from \"./kcanvas\";\n\nconst Canvas = ({ mouseOver }) => {\n  const cRef = useRef();\n  const [width, setWidth] = useState(800);\n  const [height, setHeight] = useState(500);\n  const [points, setPoints] = useState([]);\n  const [kgrid, setKGrid] = useState(null);\n\n  const [shape, setShape] = useState([]);\n  const [activeIdx, setActiveIdx] = useState(null);\n\n  useEffect(() => {\n    const kgrid = new KGrid(width, height);\n\n    setKGrid(kgrid);\n\n    const shape = [\n      { ant: 0, bat: 0, cat: 0, dog: 0 },\n      { ant: -1, bat: -1, cat: 0, dog: 0 },\n      { ant: -1, bat: 0, cat: -1, dog: 0 }\n    ];\n\n    const pts = [];\n    for (let kPt of shape) {\n      pts.push(kgrid.convertHexPointToCanvasPoint(kPt));\n    }\n    setShape(pts);\n\n    setPoints(kgrid.grid);\n  }, []);\n\n  const setActive = idx => {\n    mouseOver(points[idx]);\n    setActiveIdx(idx);\n  };\n\n  const polygons = Object.entries(R.groupBy(d => `${d.i}.${d.j}`)(points)).map(\n    ([k, v]) => {\n      var path = d3.path();\n      path.moveTo(v[0].x, v[0].y);\n      for (let i = 0; i < v.length; i++) {\n        path.lineTo(v[i].x, v[i].y);\n      }\n      path.closePath();\n\n      return path.toString();\n    }\n  );\n\n  var path = d3.path();\n  if (shape.length) {\n    path.moveTo(shape[0][0], shape[0][1]);\n    for (let i = 0; i < shape.length; i++) {\n      path.lineTo(shape[i][0], shape[i][1]);\n    }\n    path.closePath();\n  }\n\n  const shapePath = path.toString();\n\n  return (\n    <div>\n      <svg ref={cRef} width={width} height={height}>\n        {kgrid &&\n          kgrid.gridLines.map((line, idx) => (\n            <line\n              key={idx}\n              x1={line[0][0]}\n              y1={line[0][1]}\n              x2={line[1][0]}\n              y2={line[1][1]}\n              stroke={\"#eee\"}\n            />\n          ))}\n        {polygons.map((path, idx) => (\n          <path key={idx} d={path} fill={\"#eee\"} fillOpacity={0.5} />\n        ))}\n        {points.map((pt, idx) => (\n          <circle\n            key={idx}\n            cx={pt.x}\n            cy={pt.y}\n            r={idx === activeIdx ? 5 : 2}\n            fill={idx === activeIdx ? colors.highlight : \"#ddd\"}\n          />\n        ))}\n        <path d={shapePath} fill={\"green\"} fillOpacity={0.4} />\n        {points.map((pt, idx) => (\n          <circle\n            key={idx}\n            cx={pt.x}\n            cy={pt.y}\n            r={6}\n            fill={\"black\"}\n            fillOpacity=\"0\"\n            onMouseOver={() => setActive(idx)}\n            onMouseLeave={() => setActive(null)}\n          />\n        ))}\n      </svg>\n    </div>\n  );\n};\n\nexport default Canvas;\n","import React, { useState } from \"react\";\nimport Canvas from \"./canvas\";\n\nfunction App() {\n  const [activePt, setActivePt] = useState(null);\n  const mouseOver = pt => {\n    setActivePt(pt);\n  };\n\n  return (\n    <div>\n      <div className=\"mx-auto mt-10 shadow flex flex-row w-8/12\">\n        <Canvas mouseOver={mouseOver} />\n        {activePt && (\n          <ul>\n            <li>ANT: {activePt.ant}</li>\n            <li>BAT: {activePt.bat}</li>\n            <li>CAT: {activePt.cat}</li>\n            <li>DOG: {activePt.dog}</li>\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}